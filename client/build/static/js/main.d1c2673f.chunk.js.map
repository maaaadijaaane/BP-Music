{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/Checkbox.js","components/CreateEditAccountDialog.js","components/EditFanAccount.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/LocationSearch.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","LOCATION_SEARCH","ACCOUNT","ACCOUNT_EDIT","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","Checkbox","label","isSelected","onCheckboxChange","name","checked","genreList","artistList","venueList","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","genres","Array","from","selectedOptions","item","GPSvalidate","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","showFanDialog","showArtistDialog","showVenueDialog","userData","accountType","artists","venues","keys","genreCheckboxes","filter","checkbox","forEach","console","log","push","artistCheckboxes","venueCheckboxes","artistName","instagramHandle","facebookHandle","streetAddress","phoneNumber","socialMediaLinks","url","create","fetch","headers","method","body","JSON","stringify","then","res","status","done","text","resText","accountName","confirmDelete","confirmDeleteAccount","e","handleAccountType","renderFanDialog","cancel","onSubmit","handleEditSubmit","map","createGenreCheckbox","editGenreCheckbox","selectAllGenre","deselectAllGenre","createArtistCheckbox","selectAllArtist","deselectAllArtist","createVenueCheckbox","selectAllVenue","deselectAllVenue","renderArtistDialog","size","placeholder","required","multiple","venue_location","validAddress","renderVenueDialog","phone_number","social_media","selectAllGenreCheckboxes","editedGenreCheckboxes","prevState","selectAllArtistCheckboxes","editedArtistCheckboxes","selectAllVenueCheckboxes","handleGenreCheckboxChange","changeEvent","handleArtistCheckboxChange","handleVenueCheckboxChange","option","key","editArtistCheckbox","editArtistCheckboxes","editVenueCheckbox","isGenreSelected","newUserRef","reduce","options","isArtistSelected","editedVenueCheckboxes","isVenueSelected","json","parse","userId","autocomplete","readOnly","pattern","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","rounds","date","substring","course","Number","strokes","minutes","seconds","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","LocationSearch","searchVal","parsedText","candidates","formatted_address","mapUrl","searchResult","validSearch","displayResults","geometry","location","lat","lng","frameborder","border","allowfullscreen","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","isAuthenticated","user","ModePage","localAccount","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1c2673f.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\",\r\n    LOCATION_SEARCH: \"LocationSearchMode\",\r\n    ACCOUNT: \"AccountMode\",\r\n    ACCOUNT_EDIT: \"AccountMode-Edit\",\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n            <span className=\"fa fa-user\"></span>&nbsp;Account</a>\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a className=\"sidemenu-item\" onClick={() => {this.props.changeMode(AppMode.LOCATION_SEARCH)}}>\r\n            Location Search\r\n          </a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Coming Up</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Events</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Venues</span>\r\n        </a> \r\n        <a className={(this.props.mode === AppMode.LOCATION_SEARCH ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.LOCATION_SEARCH)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Location/Event Finder</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","// All Checkbox was inherited from http://react.tips/checkboxes-in-react-16/\r\nimport React, { Component, PropTypes } from 'react';\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <div className=\"form-check\">\r\n    <label>\r\n      <input\r\n        id=\"checkbox\"\r\n        type=\"checkbox\"\r\n        name={label}\r\n        checked={isSelected}\r\n        onChange={onCheckboxChange}\r\n        className=\"form-check-input\"\r\n      />\r\n      {label}\r\n    </label>\r\n  </div>\r\n);\r\nexport default Checkbox;\r\n","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport Checkbox from './Checkbox.js';\r\nimport EditFanAccount from './EditFanAccount.js';\r\n\r\nconst genreList = [\r\n    'Pop',\r\n    'Hip Hop',\r\n    'Rap',\r\n    'Rock',\r\n    'EDM',\r\n    'Country',\r\n    'RnB',\r\n    'Metal'\r\n];\r\nconst artistList = [\r\n    'Post Malone',\r\n    'Ariana Grande', \r\n    'Taylor Swift',\r\n    'Kanye West',\r\n    'Jay-Z',\r\n    'Lil Wayne', \r\n    'Nicki Minaj',\r\n    'Snoop Dog'\r\n];\r\nconst venueList = [\r\n    'Red Rocks Park and Amphitheatre',\r\n    'Hollywood Bowl',\r\n    'Merriweather Post Pavilion',\r\n    'The Showbox',\r\n    'The Underground'\r\n]\r\n\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      accountType: \"fan\",\r\n                      url: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false,\r\n                      showFanDialog: false,\r\n                      showArtistDialog: false,\r\n                      showVenueDialog: false,\r\n                      genres: [],\r\n                      artists: [],\r\n                      venues: [],\r\n                      editedGenreCheckboxes: genreList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: this.isGenreSelected\r\n                        }), {}),\r\n                      editedArtistCheckboxes: artistList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: this.isArtistSelected\r\n                        }), {}),\r\n                      editedVenueCheckboxes: venueList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: this.isVenueSelected\r\n                        }), {}),\r\n                      genreCheckboxes: genreList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {}),\r\n                      artistCheckboxes: artistList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {}),\r\n                      venueCheckboxes: venueList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {})\r\n                    };\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = this.state.url;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer,\r\n                           accountType: userData.accountType,\r\n                           url: '/' + userData.accountType + 's/' + this.state.accountName});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else if (event.target.name === \"genres\") {\r\n            this.setState({genres: Array.from(event.target.selectedOptions, (item) => item.value)});\r\n        } else if(event.target.name === \"venue_location\"){\r\n            this.GPSvalidate();\r\n        }\r\n        else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        this.setState({showFanDialog: false, showArtistDialog: false, showVenueDialog: false})\r\n        //Initialize account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer,\r\n            accountType: this.state.accountType,\r\n        };\r\n        if (this.state.accountType == \"fan\") {\r\n            userData.genres = this.state.genres;\r\n            userData.artists = this.state.artists;\r\n            userData.venues = this.state.venues;\r\n            Object.keys(this.state.genreCheckboxes).filter(checkbox => this.state.genreCheckboxes[checkbox]).forEach(checkbox => {\r\n                console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                this.state.genres.push(checkbox);\r\n            });\r\n            Object.keys(this.state.artistCheckboxes).filter(checkbox => this.state.artistCheckboxes[checkbox]).forEach(checkbox => {\r\n                console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                this.state.artists.push(checkbox);\r\n            });\r\n            Object.keys(this.state.venueCheckboxes).filter(checkbox => this.state.venueCheckboxes[checkbox]).forEach(checkbox => {\r\n                console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                this.state.venues.push(checkbox);\r\n            });\r\n        }\r\n        if (this.state.accountType == \"artist\") {\r\n            userData.artistName = this.state.artistName;\r\n            userData.genres = this.state.genres;\r\n            userData.instagramHandle = this.state.instagramHandle;\r\n            userData.facebookHandle = this.state.facebookHandle;  \r\n        }\r\n        if (this.state.accountType == \"venue\") {\r\n            userData.streetAddress = this.state.streetAddress;\r\n            userData.email = this.state.email;\r\n            userData.phoneNumber = this.state.phoneNumber;\r\n            userData.socialMediaLinks = this.state.socialMediaLinks;\r\n        }\r\n        const url = this.state.url;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}).then(console.log(JSON.stringify(userData), \"is current body being updated\")); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}).then(console.log(JSON.stringify(userData), \"is current body being updated\")); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = this.state.url;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\" id=\"createNewAccountDialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleAccountType}>\r\n            <label>\r\n                Account Type:\r\n                <select name=\"accountType\"\r\n                disabled={!this.props.create}\r\n                id=\"accountType\" \r\n                value={this.state.accountType} \r\n                className=\"form-control form-textform-center\" \r\n                onChange={this.handleChange}>\r\n                <option id=\"fan\" value=\"fan\">Fan</option>\r\n                <option id=\"artist\" value=\"artist\">Artist</option>\r\n                <option id=\"venue\" value=\"venue\">Venue</option>\r\n                </select> \r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Email: \r\n                <input\r\n                id=\"emailInput\"  \r\n                autocomplete=\"off\"\r\n                readOnly={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder={this.props.create ? \"Enter Email Address\" : \"ImmaFan@live.com\"}\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                id=\"passwordInput\"\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                id=\"repeatPasswordInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                id=\"displayNameInput\"\r\n                readOnly={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder={this.props.create ? \"Display Name\": \"My Name\"}\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                id=\"profilePic\"\r\n                readOnly={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                id=\"securityQInput\"\r\n                readOnly={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder={this.props.create ? \"Security Question\": \"SQ\"}\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                id=\"securityAInput\"\r\n                readOnly={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder={this.props.create ? \"Security Answer\": \"SA\"}\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" id=\"submitAccountBtn\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName} deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}/> : null}\r\n        {this.state.showFanDialog ? this.renderFanDialog() : null}\r\n        {this.state.showArtistDialog ? this.renderArtistDialog() : null}\r\n        {this.state.showVenueDialog ? this.renderVenueDialog() : null}\r\n    </div>\r\n    );\r\n}\r\n\r\nhandleAccountType = (event) => {\r\n    event.preventDefault();\r\n    if (this.state.accountType == \"fan\") {\r\n        this.setState({showFanDialog: true,\r\n            url: '/fans/' + this.state.accountName,\r\n            genres: [],\r\n            artists: [],\r\n            venues: []});\r\n    }\r\n    if (this.state.accountType == \"artist\") {\r\n        this.setState({showArtistDialog: true,\r\n            url: '/artists/' + this.state.accountName,\r\n            artistName: \"\",\r\n            genres: [],\r\n            instagramHandle: \"\",\r\n            facebookHandle: \"\"});\r\n    }\r\n    if (this.state.accountType == \"venue\") {\r\n        this.setState({showVenueDialog: true,\r\n            url: '/venues/' + this.state.accountName});\r\n    }\r\n}\r\n\r\n\r\n\r\nrenderFanDialog = () => {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\" id=\"renderFanDialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Fan Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.props.create ? this.handleSubmit : this.handleEditSubmit}>\r\n        <br/>\r\n        <label>\r\n            Genres:\r\n        </label>\r\n        {this.props.create ? genreList.map(this.createGenreCheckbox) : genreList.map(this.editGenreCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllGenresBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllGenreBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllGenre}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllGenreBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllGenre}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <label>\r\n            Artists:\r\n        </label>\r\n        {artistList.map(this.createArtistCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllArtistsBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllArtistBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllArtist}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllArtistBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllArtist}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <label>\r\n            Venues:\r\n        </label>\r\n        {venueList.map(this.createVenueCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllVenuesBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllVenueBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllVenue}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllVenueBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllVenue}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <button role=\"submit\" id=\"fanAccountBtn\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n                </button>\r\n        </form>\r\n    </div></div></div>\r\n    );\r\n}\r\n\r\nrenderArtistDialog = () => {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Artist Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.handleSubmit}>\r\n        <br/>\r\n        <label>\r\n            Artist Name:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"artistName\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"Artist Name\"\r\n            required={true}\r\n            value={this.state.artistName}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Genres:\r\n            <select name=\"genres\" \r\n                onChange={this.handleChange} \r\n                className=\"form-control form-textform-center\" multiple>\r\n                <option value=\"pop\">Pop</option>\r\n                <option value=\"hip-hop\">Hip-Hop</option>\r\n                <option value=\"rap\">Rap</option>\r\n                <option value=\"rock\">Rock</option>\r\n                <option value=\"edm\">EDM</option>\r\n                <option value=\"country\">Country</option>\r\n            </select>\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Instagram:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"instagramHandle\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"@your-handle\"\r\n            required={true}\r\n            value={this.state.instagramHandle}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Facebook:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"facebookHandle\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"@your-handle\"\r\n            required={true}\r\n            value={this.state.facebookHandle}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <button role=\"submit\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            &nbsp;Create Artist Account</button>\r\n        </form>\r\n        </div></div></div>\r\n    );\r\n}\r\n\r\nGPSvalidate = async () => {\r\n    let result = await fetch('location/' + this.state.venue_location)\r\n    if (result.status !== 200) {\r\n        this.setState({validAddress: true});\r\n    }\r\n    else{\r\n        this.setState({validAddress: false});\r\n    }\r\n}\r\n\r\nrenderVenueDialog = () => { \r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Create Venue Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.handleSubmit}>\r\n        Street Address:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"venue_location\"\r\n                type=\"text\"\r\n                size=\"40\"\r\n                placeholder=\"123 Example St. Portland, OR\"\r\n                required={true}\r\n                value={this.state.venue_location}\r\n                onChange={this.handleChange}\r\n                />\r\n        Email:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"Email\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Email\"\r\n                required={true}\r\n                value={this.state.email}\r\n                onChange={this.handleChange}\r\n                />\r\n        Phone:\r\n        <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"Phone\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"666-777-1337\"\r\n                required={true}\r\n                value={this.state.phone_number}\r\n                onChange={this.handleChange}\r\n                />\r\n        Social Media Links:\r\n        <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"social_media\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Facebook,IG,Etc.\"\r\n                required={true}\r\n                value={this.state.social_media}\r\n                onChange={this.handleChange}\r\n                />\r\n        <p></p>\r\n        {this.state.validAddress ? \r\n        <button role=\"submit\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            &nbsp;Create Venue Account</button>\r\n             : null}\r\n        </form>\r\n        </div></div></div>\r\n    );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Create Account Page checkboxes\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Functions for select all checkboxes for genre/artist/venue\r\nselectAllGenreCheckboxes = isSelected => {\r\n    Object.keys(this.props.create ? this.state.genreCheckboxes : this.state.editedGenreCheckboxes).forEach(checkbox => {\r\n      {this.props.create ?\r\n        this.setState(prevState => ({\r\n            genreCheckboxes: {\r\n              ...prevState.genreCheckboxes,\r\n              [checkbox]: isSelected\r\n            }\r\n          }))\r\n        :\r\n        this.setState(prevState => ({\r\n            editedGenreCheckboxes: {\r\n              ...prevState.editedGenreCheckboxes,\r\n              [checkbox]: isSelected\r\n            }\r\n          }));\r\n        }\r\n    });\r\n  };\r\n  selectAllArtistCheckboxes = isSelected => {\r\n    Object.keys(this.props.create ? this.state.artistCheckboxes : this.state.editedArtistCheckboxes).forEach(checkbox => {\r\n      this.setState(prevState => ({\r\n        artistCheckboxes: {\r\n          ...prevState.artistCheckboxes,\r\n          [checkbox]: isSelected\r\n        }\r\n      }));\r\n    });\r\n  };\r\n  selectAllVenueCheckboxes = isSelected => {\r\n    Object.keys(this.state.venueCheckboxes).forEach(checkbox => {\r\n      this.setState(prevState => ({\r\n        venueCheckboxes: {\r\n          ...prevState.venueCheckboxes,\r\n          [checkbox]: isSelected\r\n        }\r\n      }));\r\n    });\r\n  };\r\n\r\n  // Function to update state for select/deselect all checkboxes genre/artist/venue\r\n  selectAllGenre = () => this.selectAllGenreCheckboxes(true);\r\n\r\n  deselectAllGenre = () => this.selectAllGenreCheckboxes(false);\r\n\r\n  selectAllArtist = () => this.selectAllArtistCheckboxes(true);\r\n\r\n  deselectAllArtist = () => this.selectAllArtistCheckboxes(false);\r\n\r\n  selectAllVenue = () => this.selectAllVenueCheckboxes(true);\r\n\r\n  deselectAllVenue = () => this.selectAllVenueCheckboxes(false);\r\n\r\n  // Functions to handle checkboxe changes genre/artist/venue\r\n  handleGenreCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n    {this.props.create ?\r\n    this.setState(prevState => ({\r\n      genreCheckboxes: {\r\n        ...prevState.genreCheckboxes,\r\n        [name]: !prevState.genreCheckboxes[name]\r\n      }\r\n    }))\r\n    :\r\n    this.setState(prevState => ({\r\n      editedGenreCheckboxes: {\r\n        ...prevState.editedGenreCheckboxes,\r\n        [name]: !prevState.editedGenreCheckboxes[name]\r\n      }\r\n    }));\r\n    }\r\n  };\r\n\r\n  handleArtistCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      artistCheckboxes: {\r\n        ...prevState.artistCheckboxes,\r\n        [name]: !prevState.artistCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  handleVenueCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      venueCheckboxes: {\r\n        ...prevState.venueCheckboxes,\r\n        [name]: !prevState.venueCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Functions for creating a single checkboxe for genre/artist/venue\r\n  createGenreCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.genreCheckboxes[option]}\r\n      onCheckboxChange={this.handleGenreCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n  createArtistCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.artistCheckboxes[option]}\r\n      onCheckboxChange={this.handleArtistCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n  createVenueCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.venueCheckboxes[option]}\r\n      onCheckboxChange={this.handleVenueCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n\r\n    // Functions for creating a single checkboxe for genre/artist/venue\r\n    editGenreCheckbox = option => (\r\n        <Checkbox\r\n          label={option}\r\n          isSelected={this.state.editedGenreCheckboxes[option]}\r\n          onCheckboxChange={this.handleGenreCheckboxChange}\r\n          key={option}\r\n        />\r\n      );\r\n      editArtistCheckbox = option => (\r\n        <Checkbox\r\n          label={option}\r\n          isSelected={this.state.editArtistCheckboxes[option]}\r\n          onCheckboxChange={this.handleArtistCheckboxChange}\r\n          key={option}\r\n        />\r\n      );\r\n      editVenueCheckbox = option => (\r\n        <Checkbox\r\n          label={option}\r\n          isSelected={this.state.editedGenreCheckboxes[option]}\r\n          onCheckboxChange={this.handleVenueCheckboxChange}\r\n          key={option}\r\n        />\r\n      );\r\n\r\n  // Function to check if a checkbox should be selected based on the users data\r\n  isGenreSelected = () =>\r\n  {\r\n    Object.keys(this.state.editedGenreCheckboxes).forEach(checkbox => {\r\n        this.setState(prevState => ({\r\n          genreCheckboxes: {\r\n            ...prevState.genreCheckboxes,\r\n            [checkbox]: true\r\n            }  \r\n        }));\r\n    });\r\n  };\r\n}\r\nexport default CreateEditAccountDialog;","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport Checkbox from './Checkbox.js';\r\n\r\nconst genreList = [\r\n    'Pop',\r\n    'Hip Hop',\r\n    'Rap',\r\n    'Rock',\r\n    'EDM',\r\n    'Country',\r\n    'RnB',\r\n    'Metal'\r\n];\r\nconst artistList = [\r\n    'Post Malone',\r\n    'Ariana Grande', \r\n    'Taylor Swift',\r\n    'Kanye West',\r\n    'Jay-Z',\r\n    'Lil Wayne', \r\n    'Nicki Minaj',\r\n    'Snoop Dog'\r\n];\r\nconst venueList = [\r\n    'Red Rocks Park and Amphitheatre',\r\n    'Hollywood Bowl',\r\n    'Merriweather Post Pavilion',\r\n    'The Showbox',\r\n    'The Underground'\r\n]\r\n\r\n\r\nclass EditFanAccount extends React.Component {\r\n\r\n      // Functions to handle checkboxe changes genre/artist/venue\r\n  handleGenreCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      genreCheckboxes: {\r\n        ...prevState.genreCheckboxes,\r\n        [name]: !prevState.genreCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  handleArtistCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      artistCheckboxes: {\r\n        ...prevState.artistCheckboxes,\r\n        [name]: !prevState.artistCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  handleVenueCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      venueCheckboxes: {\r\n        ...prevState.venueCheckboxes,\r\n        [name]: !prevState.venueCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Functions for creating a single checkboxe for genre/artist/venue\r\n  createGenreCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.genreCheckboxes[option]}\r\n      onCheckboxChange={this.handleGenreCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n  createArtistCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.artistCheckboxes[option]}\r\n      onCheckboxChange={this.handleArtistCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n  createVenueCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.venueCheckboxes[option]}\r\n      onCheckboxChange={this.handleVenueCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n}\r\n\r\nexport default EditFanAccount","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div className=\"padded-page\" id=\"loginPage\">\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                id=\"userEmail\"\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                id=\"userPassword\"\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button \r\n                type=\"submit\"\r\n                id=\"loginBtn\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" id=\"createAccountBtn\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\" id =\"feedPage\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\n\r\nclass LocationSearch extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            searchVal: \"\",\r\n            searchResult: {},\r\n            validSearch: false,\r\n            mapUrl: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        let result = await fetch('location/' + this.state.searchVal)\r\n\r\n        if (result.status === 200) {\r\n            let text = await result.text();\r\n            let parsedText = JSON.parse(text);\r\n            result = await fetch('map/' + parsedText.candidates[0].formatted_address);\r\n            let mapUrl = await result.text();\r\n            this.setState({ searchResult: JSON.parse(text), validSearch: true, mapUrl: mapUrl});\r\n        } else {\r\n            this.setState({ searchResult: {}, validSearch: false, mapUrl: \"\"});\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    displayResults = () => {\r\n        return (\r\n            <div>\r\n                <div>Name: {this.state.searchResult.candidates[0].name}</div>\r\n                <div>Address: {this.state.searchResult.candidates[0].formatted_address}</div>\r\n                <div>Latitude: {this.state.searchResult.candidates[0].geometry.location.lat}</div>\r\n                <div>Longitude: {this.state.searchResult.candidates[0].geometry.location.lng}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padded-page\">\r\n                <center>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label>Enter a search<br />\r\n                            <input className=\"form-control form-text form-center\"\r\n                                name=\"searchVal\"\r\n                                type=\"text\"\r\n                                value={this.state.searchVal}\r\n                                onChange={this.handleChange}>\r\n                            </input>\r\n                        </label>\r\n                        <br />\r\n                        <button role=\"submit\">Submit</button>\r\n                    </form>\r\n                    {this.state.validSearch ? this.displayResults() : null}\r\n                    <iframe\r\n                        width=\"400\"\r\n                        height=\"300\"\r\n                        frameborder=\"0\" style={{border: 0}}\r\n                        src={this.state.mapUrl} allowfullscreen>\r\n                    </iframe> \r\n                </center>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LocationSearch;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport LocationSearch from './LocationSearch.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"URScene Login\";\r\nmodeTitle[AppMode.FEED] = \"Events near you\";\r\nmodeTitle[AppMode.ROUNDS] = \"My events\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Enter new event\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Event\";\r\nmodeTitle[AppMode.COURSES] = \"Venues\";\r\nmodeTitle[AppMode.LOCATION_SEARCH] = \"Location Search\"\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.LOCATION_SEARCH] = LocationSearch;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div>\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}\r\n            changeMode={this.handleChangeMode}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}