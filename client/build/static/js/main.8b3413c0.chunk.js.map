{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/Checkbox.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/LocationSearch.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","LOCATION_SEARCH","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","Checkbox","label","isSelected","onCheckboxChange","name","checked","genreList","artistList","venueList","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","genres","Array","from","selectedOptions","item","GPSvalidate","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","showFanDialog","showArtistDialog","showVenueDialog","userData","accountType","artists","venues","keys","genreCheckboxes","filter","checkbox","forEach","console","log","push","artistCheckboxes","venueCheckboxes","artistName","instagramHandle","facebookHandle","streetAddress","phoneNumber","socialMediaLinks","url","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","accountName","confirmDelete","confirmDeleteAccount","e","handleAccountType","renderFanDialog","cancel","onSubmit","map","createGenreCheckbox","selectAllGenre","deselectAllGenre","createArtistCheckbox","selectAllArtist","deselectAllArtist","createVenueCheckbox","selectAllVenue","deselectAllVenue","renderArtistDialog","size","placeholder","required","venue_location","validAddress","renderVenueDialog","phone_number","social_media","selectAllGenreCheckboxes","prevState","selectAllArtistCheckboxes","selectAllVenueCheckboxes","handleGenreCheckboxChange","changeEvent","handleArtistCheckboxChange","handleVenueCheckboxChange","option","key","newUserRef","reduce","options","json","parse","userId","autocomplete","pattern","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","rounds","date","substring","course","Number","strokes","minutes","seconds","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","LocationSearch","searchVal","parsedText","candidates","formatted_address","mapUrl","searchResult","validSearch","displayResults","geometry","location","lat","lng","frameborder","border","allowfullscreen","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b3413c0.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\n\nconst AppMode = {\n    LOGIN: \"LoginMode\",\n    FEED: \"FeedMode\",\n    ROUNDS: \"RoundsMode\",\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\n    COURSES: \"CoursesMode\",\n    LOCATION_SEARCH: \"LocationSearchMode\"\n};\n\nObject.freeze(AppMode); //This ensures that the object is immutable.\n\nexport default AppMode;","import React from 'react';\nimport AppMode from '../AppMode';\n\nclass NavBar extends React.Component {\n\n  getMenuBtnIcon = () => {\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \n          this.props.mode === AppMode.ROUNDS_EDITROUND)\n          return \"fa fa-arrow-left\";\n      if (this.props.menuOpen)\n        return \"fa fa-times\";\n      return \"fa fa-bars\";\n  }\n\n  handleMenuBtnClick = () => {\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\n      this.props.changeMode(AppMode.ROUNDS);\n    } else if (this.props.mode != AppMode.LOGIN) {\n      this.props.toggleMenuOpen();\n    }\n  }\n\n    \n  render() {\n    return (\n    <div className=\"navbar\">  \n    <span className=\"navbar-items\">\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\n        </span>\n      </button>\n      <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" alt=\"Speed Score Logo\" height=\"38px\"\n      width=\"38px\" />\n      <span className=\"navbar-title\">\n        &nbsp;{this.props.title}\n      </span>\n    </span>\n  </div>\n); \n}\n}\n\nexport default NavBar;\n","import React from 'react';\nimport AppMode from './../AppMode.js'\n\nclass SideMenu extends React.Component {\n\n//renderModeItems -- Renders correct subset of mode menu items based on\n//current mode, which is stored in this.prop.mode. Uses switch statement to\n//determine mode.\nrenderModeMenuItems = () => {\n  switch (this.props.mode) {\n    case AppMode.FEED:\n      return(\n        <div>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\n        <a className=\"sidemenu-item \">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\n        </div>\n      );\n    break;\n    case AppMode.ROUNDS:\n      return(\n        <div>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\n        </div>\n      );\n    break;\n    case AppMode.COURSES:\n      return(\n        <div>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\n        </div>\n      );\n    default:\n        return null;\n    }\n}\n\n    render() {\n       return (\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\n             onClick={this.props.toggleMenuOpen}>\n          {/* SIDE MENU TITLE */}\n          <div className=\"sidemenu-title\">\n            <img src={this.props.profilePicURL} height='60' width='60' />\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\n        </div>\n          {/* MENU CONTENT */}\n          {this.renderModeMenuItems()}\n          {/* The following menu items are present regardless of mode */}\n          {this.props.localAccount ? \n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\n          <a className=\"sidemenu-item\" onClick={() => {this.props.changeMode(AppMode.LOCATION_SEARCH)}}>\n            Location Search\n          </a>\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\n        </div>\n       );\n    }\n}\n\nexport default SideMenu;\n","import React from 'react';\nimport AppMode from '../AppMode.js';\n\n\nclass ModeBar extends React.Component {\n    render() {\n      return(\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\n          <span className=\"modebaricon fa fa-th-list\"></span>\n          <span className=\"modebar-text\">Coming Up</span>\n        </a>\n        <a className={(this.props.mode === AppMode.ROUNDS || \n               this.props.mode === AppMode.ROUNDS_EDITROUND || \n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                  \" item-selected\" : null)}\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\n          <span className=\"modebar-icon  fa fa-history\"></span>\n          <span className=\"modebar-text\">Events</span>\n        </a>\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\n          <span className=\"modebar-icon  fa fa-flag\"></span>\n          <span className=\"modebar-text\">Venues</span>\n        </a> \n        <a className={(this.props.mode === AppMode.LOCATION_SEARCH ? \" item-selected\" : null)}\n          onClick={()=>this.props.changeMode(AppMode.LOCATION_SEARCH)}>\n          <span className=\"modebar-icon  fa fa-flag\"></span>\n          <span className=\"modebar-text\">Location/Event Finder</span>\n        </a> \n        </div>\n      );\n    }\n}\n\nexport default ModeBar;\n","import React from 'react';\n\nclass ConfirmDeleteAccount extends React.Component {\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {emailMatches: false};\n    }\n    \n    componentDidMount() {\n        this.emailRef.current.focus();\n    }\n\n    handleChange = () => {\n        const match = (this.emailRef.current.value === this.props.email);\n        if (match != this.state.emailMatches) {\n            this.setState({emailMatches: match});\n        }\n    }\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete your account? <br />\n                 <i>This action cannot be undone.</i></p>\n              <label>\n                Confirm Email ({this.props.email}):\n                <br/>\n                <input \n                    className=\"form-center\"\n                    type=\"text\"\n                    ref={this.emailRef}\n                    onChange={this.handleChange} />\n                </label>\n                <br />\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\n                  Yes, Delete My Account</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteAccount;","// All Checkbox was inherited from http://react.tips/checkboxes-in-react-16/\nimport React, { Component, PropTypes } from 'react';\n\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\n  <div className=\"form-check\">\n    <label>\n      <input\n        id=\"checkbox\"\n        type=\"checkbox\"\n        name={label}\n        checked={isSelected}\n        onChange={onCheckboxChange}\n        className=\"form-check-input\"\n      />\n      {label}\n    </label>\n  </div>\n);\nexport default Checkbox;\n","import React from 'react';\nimport { async } from 'regenerator-runtime';\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\nimport Checkbox from './Checkbox.js';\n\nconst genreList = [\n    'Pop',\n    'Hip Hop',\n    'Rap',\n    'Rock',\n    'EDM',\n    'Country',\n    'RnB',\n    'Metal'\n];\nconst artistList = [\n    'Post Malone',\n    'Ariana Grande', \n    'Taylor Swift',\n    'Kanye West',\n    'Jay-Z',\n    'Lil Wayne', \n    'Nicki Minaj',\n    'Snoop Dog'\n];\nconst venueList = [\n    'Red Rocks Park and Amphitheatre',\n    'Hollywood Bowl',\n    'Merriweather Post Pavilion',\n    'The Showbox',\n    'The Underground'\n]\n\n\nclass CreateEditAccountDialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.origAccountInfo = null;\n        //Create a ref for the email input DOM element\n        this.newUserRef = React.createRef();\n        this.repeatPassRef = React.createRef();\n        this.profilePicRef = React.createRef();\n        this.state = {accountName: \"\",\n                      displayName: \"\",\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                      password: \"\",\n                      passwordRepeat: \"\",\n                      securityQuestion: \"\",\n                      securityAnswer: \"\",\n                      accountType: \"fan\",\n                      url: \"\",\n                      formUpdated: false,\n                      confirmDelete: false,\n                      showFanDialog: false,\n                      showArtistDialog: false,\n                      showVenueDialog: false,\n                      genres: [],\n                      artists: [],\n                      venues: [],\n                      genreCheckboxes: genreList.reduce(\n                        (options, option) => ({\n                          ...options,\n                          [option]: false\n                        }), {}),\n                      artistCheckboxes: artistList.reduce(\n                        (options, option) => ({\n                          ...options,\n                          [option]: false\n                        }), {}),\n                      venueCheckboxes: venueList.reduce(\n                        (options, option) => ({\n                          ...options,\n                          [option]: false\n                        }), {})\n                    };\n    } \n\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\n    //the database and push them into the state.\n    async componentDidMount() {\n        if (!this.props.create) {\n            //obtain current user data from database and push into state\n            const url = this.state.url;\n            const res = await fetch(url);\n            const json = await res.json();\n            const userData = JSON.parse(json);\n            this.origAccountInfo = userData; //This determines whether update can occur\n            this.origAccountInfo.passwordRepeat = userData.password;\n            this.setState({accountName: this.props.userId,\n                           displayName: userData.displayName,\n                           profilePicURL: userData.profilePicURL,\n                           password: userData.password,\n                           passwordRepeat: userData.password,\n                           securityQuestion: userData.securityQuestion,\n                           securityAnswer: userData.securityAnswer,\n                           accountType: userData.accountType,\n                           url: '/' + userData.accountType + 's/' + this.state.accountName});\n        }\n    }\n\n    //checkDataValidity -- Callback function invoked after a form element in\n    //the 'Create Account' dialog box changes and component state has been\n    //updated. We first check whether the passwords match. If they do not, \n    //we set a custom validity message to be displayed when the user clicks the\n    //'Create Account' button. Otherwise, we reset the custom validity message\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\n    //Second, we check whether anything in the form changed from the original.\n    //If so, we update the 'formUpdated' state var, so that the form's submit\n    //button is enabled.\n    checkDataValidity = () => {\n        if (this.state.password != this.state.passwordRepeat) {\n            //Passwords don't match\n            this.repeatPassRef.current.setCustomValidity(\n            \"This password must match password entered in previous field.\");\n        } else {\n            this.repeatPassRef.current.setCustomValidity(\"\");\n        }\n    }\n\n    //handleChange--Called when a field in a dialog box form changes.\n    handleChange = (event) => {\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\n        if (event.target.name === \"profilePic\") {\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                               formUpdated: formUpdated},\n                               this.checkDataValidity);\n            } else { //The user selected a file\n                const self = this;\n                const reader = new FileReader();\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\n                reader.addEventListener(\"load\",function() {\n                    self.setState({profilePicURL:  this.result,\n                                   formUpdated: formUpdated},this.checkDataValidity);\n                });\n                \n            }\n        } else if (event.target.name === \"genres\") {\n            this.setState({genres: Array.from(event.target.selectedOptions, (item) => item.value)});\n        } else if(event.target.name === \"venue_location\"){\n            this.GPSvalidate();\n        }\n        else {\n            this.setState({[event.target.name]: event.target.value,\n                           formUpdated: formUpdated},this.checkDataValidity);\n        }\n    } \n\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\n    //true since this.origAccountInfo is set to null.\n    //Should be called whenever the user makes a change to form data.\n    formIsUpdated = (updateField,updateVal) => {\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\n        if (updateField != \"displayName\" && \n             this.state.displayName != this.origAccountInfo.displayName) \n             {return true;}\n        if (updateField != \"profilePicURL\" && \n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \n             {return true;}\n        if (updateField != \"password\" &&\n            this.state.password !== this.origAccountInfo.password)\n            {return true;}\n        if (updateField != \"passwordRepeat\" &&\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\n            {return true;}\n        if (updateField != \"securityQuestion\" &&\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\n            {return true;}\n        if (updateField != \"securityAnswer\" &&\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\n            {return true;}\n        return false;\n    }\n\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\n    //Sets default value of display name to value entered into Email field \n    //as a courtesy.\n    setDefaultDisplayName = (event) => {\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\n        this.setState({displayName: event.target.value});\n      }\n    }\n\n    //handleSubmit -- Triggered when user clicks on submit button to\n    //either create or edit account.\n    //Custom data checking ensures user account under this email does not \n    //already exist and that the rest of the info is valid. We create a new  \n    // object for user, save it to localStorage and take user to app's \n    //landing page. \n    handleSubmit = async(event) => {\n        event.preventDefault();\n        this.setState({showFanDialog: false, showArtistDialog: false, showVenueDialog: false})\n        //Initialize account\n        let userData = {\n            displayName: this.state.displayName,\n            password: this.state.password,\n            profilePicURL: this.state.profilePicURL,\n            securityQuestion: this.state.securityQuestion,\n            securityAnswer: this.state.securityAnswer,\n            accountType: this.state.accountType,\n        };\n        if (this.state.accountType == \"fan\") {\n            userData.genres = this.state.genres;\n            userData.artists = this.state.artists;\n            userData.venues = this.state.venues;\n            Object.keys(this.state.genreCheckboxes).filter(checkbox => this.state.genreCheckboxes[checkbox]).forEach(checkbox => {\n                if(this.state.accountType == \"fan\"){\n                    console.log(checkbox, \"is selected and being stored to fan account.\");\n                } else if(this.state.accountType == \"artist\"){\n                    console.log(checkbox, \"is selected and being stored to artist account.\");\n                } else {\n                    console.log(checkbox, \"is selected and being stored to venue account.\");\n                }\n                this.state.genres.push(checkbox);\n            });\n            Object.keys(this.state.artistCheckboxes).filter(checkbox => this.state.artistCheckboxes[checkbox]).forEach(checkbox => {\n                console.log(checkbox, \"is selected and being stored to fan account.\");\n                this.state.artists.push(checkbox);\n            });\n            Object.keys(this.state.venueCheckboxes).filter(checkbox => this.state.venueCheckboxes[checkbox]).forEach(checkbox => {\n                console.log(checkbox, \"is selected and being stored to fan account.\");\n                this.state.venues.push(checkbox);\n            });\n        }\n        if (this.state.accountType == \"artist\") {\n            userData.artistName = this.state.artistName;\n            userData.genres = this.state.genres;\n            userData.instagramHandle = this.state.instagramHandle;\n            userData.facebookHandle = this.state.facebookHandle;  \n        }\n        if (this.state.accountType == \"venue\") {\n            userData.streetAddress = this.state.streetAddress;\n            userData.email = this.state.email;\n            userData.phoneNumber = this.state.phoneNumber;\n            userData.socialMediaLinks = this.state.socialMediaLinks;\n        }\n        const url = this.state.url;\n        let res;\n        if (this.props.create) { //use POST route to create new user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'POST',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\n            } else { //Unsuccessful account creation\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        } else { //use PUT route to update existing user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'PUT',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"User Account Updated!\",false);\n            } else { //Unsuccessful account update\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        }\n    }\n\n    //deleteAccount -- Called after confirms account deletion. \n    //Uses DELETE server route to perform server deletion. \n    //Calls on done with status message and\n    //true if delete was succesful, false otherwise.\n    deleteAccount = async() => {\n       const url = this.state.url;\n       const res = await fetch(url, \n                    {method: 'DELETE'}); \n        if (res.status == 200) { //successful account deletion!\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\n        } else { //Unsuccessful account deletion\n            //Grab textual error message\n            const resText = await res.text();\n            this.props.done(resText,false);\n        }\n        this.setState({confirmDelete: false});\n    }\n\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\n    //button to indicate intention to delete account. Presents the Confirm\n    //Delete dialog box.\n    confirmDeleteAccount = (e) => {\n        e.preventDefault();\n        this.setState({confirmDelete: true});\n    }\n\n    render() {\n    return (  \n    <div className=\"modal\" role=\"dialog\" id=\"createNewAccountDialog\">\n    <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n            <div className=\"modal-header\">\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\n              <button className=\"modal-close\" \n                       onClick={this.props.cancel}>\n                &times;</button>\n            </div>\n            <div className=\"modal-body\">\n            <form onSubmit={this.handleAccountType}>\n            <label>\n                Account Type:\n                <select name=\"accountType\" id=\"accountType\" value={this.state.accountType} \n                    className=\"form-control form-textform-center\" \n                    onChange={this.handleChange}>\n                    <option id=\"fan\" value=\"fan\">Fan</option>\n                    <option id=\"artist\" value=\"artist\">Artist</option>\n                    <option id=\"venue\" value=\"venue\">Venue</option>\n                </select> \n            </label>\n            <br/>\n            <label>\n                Email: \n                <input\n                id=\"emailInput\"  \n                autocomplete=\"off\"\n                disabled={!this.props.create}\n                className=\"form-control form-text form-center\"\n                name=\"accountName\"\n                type=\"email\"\n                size=\"35\"\n                placeholder=\"Enter Email Address\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                ref={this.newUserRef}\n                value={this.state.accountName}\n                onChange={this.handleChange}\n                onBlur={this.setDefaultDisplayName}\n                />\n            </label>\n            <br/>\n            <label>\n                Password:\n                <input\n                id=\"passwordInput\"\n                autocomplete=\"off\"\n                className=\"form-control form-text form-center\"\n                name=\"password\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Enter Password\"\n                pattern=\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                required={true}\n                value={this.state.password}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Repeat Password:\n                <input\n                id=\"repeatPasswordInput\"\n                className=\"form-control form-text form-center\"\n                name=\"passwordRepeat\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Repeat Password\"\n                required={true}\n                ref={this.repeatPassRef}\n                value={this.state.passwordRepeat}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Display Name:\n                <input\n                id=\"displayNameInput\"\n                className=\"form-control form-text form-center\"\n                name=\"displayName\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Display Name\"\n                required={true}\n                value={this.state.displayName}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Profile Picture:<br/>\n                <input\n                id=\"profilePic\"\n                className=\"form-control form-text form-center\"\n                name=\"profilePic\"\n                type=\"file\"\n                accept=\"image/x-png,image/gif,image/jpeg\" \n                ref={this.profilePicRef}\n                value={this.state.profilePic}\n                onChange={this.handleChange}\n                />\n                <img src={this.state.profilePicURL != \"\" ? \n                            this.state.profilePicURL :\n                            this.state.profilePicDataURL} \n                        height=\"60\" width=\"60\" \n                 />\n            </label> \n            <br/>\n            <label>\n                Security Question:\n                <textarea\n                id=\"securityQInput\"\n                className=\"form-control form-text form-center\"\n                name=\"securityQuestion\"\n                size=\"35\"\n                placeholder=\"Security Question\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityQuestion}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Answer to Security Question:\n                <textarea\n                id=\"securityAInput\"\n                className=\"form-control form-text form-center\"\n                name=\"securityAnswer\"\n                type=\"text\"\n                placeholder=\"Answer\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityAnswer}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            {!this.props.create ?  \n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\n                Delete Account...\n            </button> : null}\n            <br/><br/>\n            <button role=\"submit\" id=\"submitAccountBtn\" \n                disabled={!this.state.formUpdated}\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\n            </button>\n            </form>\n            </div>\n        </div>\n        {this.state.confirmDelete ? \n          <ConfirmDeleteAccount email={this.state.accountName} deleteAccount={this.deleteAccount}\n                                close={() => (this.setState({confirmDelete: false}))}/> : null}\n        {this.state.showFanDialog ? this.renderFanDialog() : null}\n        {this.state.showArtistDialog ? this.renderArtistDialog() : null}\n        {this.state.showVenueDialog ? this.renderVenueDialog() : null}\n    </div>\n    );\n}\n\nhandleAccountType = (event) => {\n    event.preventDefault();\n    if (this.state.accountType == \"fan\") {\n        this.setState({showFanDialog: true,\n            url: '/fans/' + this.state.accountName,\n            genres: [],\n            artists: [],\n            venues: []});\n    }\n    if (this.state.accountType == \"artist\") {\n        this.setState({showArtistDialog: true,\n            url: '/artists/' + this.state.accountName,\n            artistName: \"\",\n            genres: [],\n            instagramHandle: \"\",\n            facebookHandle: \"\"});\n    }\n    if (this.state.accountType == \"venue\") {\n        this.setState({showVenueDialog: true,\n            url: '/venues/' + this.state.accountName});\n    }\n}\n\n\n\nrenderFanDialog = () => {\n    return (\n        <div className=\"modal\" role=\"dialog\" id=\"renderFanDialog\">\n        <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n        <div className=\"modal-header\">\n        <h3><b>Fan Account</b></h3>\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\n        </div>\n        <div className=\"modal-body\">\n        <form onSubmit={this.handleSubmit}>\n        <br/>\n        <label>\n            Genres:\n        </label>\n        {genreList.map(this.createGenreCheckbox)}\n            <div className=\"form-group mt-2\">\n                <button\n                id=\"selectAllGenresBtn\"\n                type=\"button\"\n                id=\"selectAllGenreBtn\"\n                className=\"btn btn-outline-primary mr-2\"\n                onClick={this.selectAllGenre}\n                > Select All </button>\n                <button\n                type=\"button\"\n                id=\"deselectAllGenreBtn\"\n                className=\"btn btn-outline-primary mr-2\"\n                onClick={this.deselectAllGenre}\n                > Deselect All </button>\n            </div>\n        <br/>\n        <label>\n            Artists:\n        </label>\n        {artistList.map(this.createArtistCheckbox)}\n            <div className=\"form-group mt-2\">\n                <button\n                id=\"selectAllArtistsBtn\"\n                type=\"button\"\n                id=\"selectAllArtistBtn\"\n                className=\"btn btn-outline-primary mr-2\"\n                onClick={this.selectAllArtist}\n                > Select All </button>\n                <button\n                type=\"button\"\n                id=\"deselectAllArtistBtn\"\n                className=\"btn btn-outline-primary mr-2\"\n                onClick={this.deselectAllArtist}\n                > Deselect All </button>\n            </div>\n        <br/>\n        <label>\n            Venues:\n        </label>\n        {venueList.map(this.createVenueCheckbox)}\n            <div className=\"form-group mt-2\">\n                <button\n                id=\"selectAllVenuesBtn\"\n                type=\"button\"\n                id=\"selectAllVenueBtn\"\n                className=\"btn btn-outline-primary mr-2\"\n                onClick={this.selectAllVenue}\n                > Select All </button>\n                <button\n                type=\"button\"\n                id=\"deselectAllVenueBtn\"\n                className=\"btn btn-outline-primary mr-2\"\n                onClick={this.deselectAllVenue}\n                > Deselect All </button>\n            </div>\n        <br/>\n        <button role=\"submit\" id=\"fanAccountBtn\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n            &nbsp;Create Fan Account</button>\n        </form>\n    </div></div></div>\n    );\n}\n\nrenderArtistDialog = () => {\n    return (\n        <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n        <div className=\"modal-header\">\n        <h3><b>Artist Account</b></h3>\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\n        </div>\n        <div className=\"modal-body\">\n        <form onSubmit={this.handleSubmit}>\n        <br/>\n        <label>\n            Artist Name:\n            <input\n            className=\"form-control form-text form-center\"\n            name=\"artistName\"\n            type=\"text\"\n            size=\"30\"\n            placeholder=\"Artist Name\"\n            required={true}\n            value={this.state.artistName}\n            onChange={this.handleChange}\n            />\n        </label>\n        <br/>\n        <label>\n            Genres:\n            {genreList.map(this.createGenreCheckbox)}\n            <div className=\"form-group mt-2\">\n                <button\n                id=\"selectAllGenresBtn\"\n                type=\"button\"\n                className=\"btn btn-outline-primary mr-2\"\n                onClick={this.selectAllGenre}\n                > Select All </button>\n                <button\n                type=\"button\"\n                id=\"deselectAllGenresBtn\"\n                className=\"btn btn-outline-primary mr-2\"\n                onClick={this.deselectAllGenre}\n                > Deselect All </button>\n            </div>\n        </label>\n        <br/>\n        <label>\n            Instagram:\n            <input\n            className=\"form-control form-text form-center\"\n            name=\"instagramHandle\"\n            type=\"text\"\n            size=\"30\"\n            placeholder=\"@your-handle\"\n            required={true}\n            value={this.state.instagramHandle}\n            onChange={this.handleChange}\n            />\n        </label>\n        <br/>\n        <label>\n            Facebook:\n            <input\n            className=\"form-control form-text form-center\"\n            name=\"facebookHandle\"\n            type=\"text\"\n            size=\"30\"\n            placeholder=\"@your-handle\"\n            required={true}\n            value={this.state.facebookHandle}\n            onChange={this.handleChange}\n            />\n        </label>\n        <br/>\n        <button role=\"submit\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n            &nbsp;Create Artist Account</button>\n        </form>\n        </div></div></div>\n    );\n}\n\nGPSvalidate = async () => {\n    let result = await fetch('location/' + this.state.venue_location)\n    if (result.status !== 200) {\n        this.setState({validAddress: true});\n    }\n    else{\n        this.setState({validAddress: false});\n    }\n}\n\nrenderVenueDialog = () => { \n    return (\n        <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n        <div className=\"modal-header\">\n        <h3><b>Create Venue Account</b></h3>\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\n        </div>\n        <div className=\"modal-body\">\n        <form onSubmit={this.handleSubmit}>\n        Street Address:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"venue_location\"\n                type=\"text\"\n                size=\"40\"\n                placeholder=\"123 Example St. Portland, OR\"\n                required={true}\n                value={this.state.venue_location}\n                onChange={this.handleChange}\n                />\n        Email:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"Email\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Email\"\n                required={true}\n                value={this.state.email}\n                onChange={this.handleChange}\n                />\n        Phone:\n        <input\n                className=\"form-control form-text form-center\"\n                name=\"Phone\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"666-777-1337\"\n                required={true}\n                value={this.state.phone_number}\n                onChange={this.handleChange}\n                />\n        Social Media Links:\n        <input\n                className=\"form-control form-text form-center\"\n                name=\"social_media\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Facebook,IG,Etc.\"\n                required={true}\n                value={this.state.social_media}\n                onChange={this.handleChange}\n                />\n        <p></p>\n        {this.state.validAddress ? \n        <button role=\"submit\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n            &nbsp;Create Venue Account</button>\n             : null}\n        </form>\n        </div></div></div>\n    );\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n// Create Account Page checkboxes\n//////////////////////////////////////////////////////////////////////////////////////////////\n// Functions for select all checkboxes for genre/artist/venue\nselectAllGenreCheckboxes = isSelected => {\n    Object.keys(this.state.genreCheckboxes).forEach(checkbox => {\n      // BONUS: Can you explain why we pass updater function to setState instead of an object?\n      this.setState(prevState => ({\n        genreCheckboxes: {\n          ...prevState.genreCheckboxes,\n          [checkbox]: isSelected\n        }\n      }));\n    });\n  };\n  selectAllArtistCheckboxes = isSelected => {\n    Object.keys(this.state.artistCheckboxes).forEach(checkbox => {\n      this.setState(prevState => ({\n        artistCheckboxes: {\n          ...prevState.artistCheckboxes,\n          [checkbox]: isSelected\n        }\n      }));\n    });\n  };\n  selectAllVenueCheckboxes = isSelected => {\n    Object.keys(this.state.venueCheckboxes).forEach(checkbox => {\n      // BONUS: Can you explain why we pass updater function to setState instead of an object?\n      this.setState(prevState => ({\n        venueCheckboxes: {\n          ...prevState.venueCheckboxes,\n          [checkbox]: isSelected\n        }\n      }));\n    });\n  };\n\n  // Function to update state for select/deselect all checkboxes genre/artist/venue\n  selectAllGenre = () => this.selectAllGenreCheckboxes(true);\n\n  deselectAllGenre = () => this.selectAllGenreCheckboxes(false);\n\n  selectAllArtist = () => this.selectAllArtistCheckboxes(true);\n\n  deselectAllArtist = () => this.selectAllArtistCheckboxes(false);\n\n  selectAllVenue = () => this.selectAllVenueCheckboxes(true);\n\n  deselectAllVenue = () => this.selectAllVenueCheckboxes(false);\n\n  // Functions to handle checkboxe changes genre/artist/venue\n  handleGenreCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    this.setState(prevState => ({\n      genreCheckboxes: {\n        ...prevState.genreCheckboxes,\n        [name]: !prevState.genreCheckboxes[name]\n      }\n    }));\n  };\n\n  handleArtistCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    this.setState(prevState => ({\n      artistCheckboxes: {\n        ...prevState.artistCheckboxes,\n        [name]: !prevState.artistCheckboxes[name]\n      }\n    }));\n  };\n\n  handleVenueCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    this.setState(prevState => ({\n      venueCheckboxes: {\n        ...prevState.venueCheckboxes,\n        [name]: !prevState.venueCheckboxes[name]\n      }\n    }));\n  };\n\n  // Functions for creating a single checkboxe for genre/artist/venue\n  createGenreCheckbox = option => (\n    <Checkbox\n      label={option}\n      isSelected={this.state.genreCheckboxes[option]}\n      onCheckboxChange={this.handleGenreCheckboxChange}\n      key={option}\n    />\n  );\n  createArtistCheckbox = option => (\n    <Checkbox\n      label={option}\n      isSelected={this.state.artistCheckboxes[option]}\n      onCheckboxChange={this.handleArtistCheckboxChange}\n      key={option}\n    />\n  );\n  createVenueCheckbox = option => (\n    <Checkbox\n      label={option}\n      isSelected={this.state.venueCheckboxes[option]}\n      onCheckboxChange={this.handleVenueCheckboxChange}\n      key={option}\n    />\n  );\n}\nexport default CreateEditAccountDialog;","import React from 'react'\n\nclass ResetPasswordDialog extends React.Component {\n    constructor() {\n        super();\n        this.resetPasswordRef = React.createRef();\n        this.resetPasswordRepeatRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\n    //If so, call on resetPassword in parent component to actually reset the password.\n    //Otherwise, display an error message prompting the user to try again.\n    handleSubmit= (event) => {\n        event.preventDefault();\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\n            this.props.resetPassword(this.resetPasswordRef.current.value);\n        } else {\n            this.resetPasswordRepeatRef.current.focus();\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\n        }\n    }\n\n    checkForSubmit = (e) => {\n        if (e.code === \"Enter\") {\n            e.preventDefault();\n            this.handleSubmit();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Enter new password\"\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                        className=\"form-control form-text\"\n                        ref={this.resetPasswordRef}\n                        />\n                    </label>\n                    <label>\n                        Repeat New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Repeat new password\"\n                        className=\"form-control form-text\"\n                        onKeyUp={this.checkForSubmit}\n                        ref={this.resetPasswordRepeatRef}\n                        />\n                    </label>\n                    <button role=\"submit\" \n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );\n        \n    }\n}\n\nexport default ResetPasswordDialog;","import React from 'react';\nimport AppMode from '../AppMode.js';\n\nclass LookUpAccountDialog extends React.Component {\n\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\n    //button, we check whether the account exists. If it does, we update the state,\n    //setting the resetEmail var to the email entered, hiding the current dialog box\n    //and showing the security question dialog box.\n    handleLookUpAccount = async(event) => {\n        event.preventDefault();\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\n        if (response.status == 200) {\n            const json = await response.json();\n            const obj = JSON.parse(json);\n            if (obj.authStrategy === \"local\") {\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\n            } else { //Account exists but was created through OAuth so password can't be reset \n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\n            }\n        } else {\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\n                    <button className=\"modal-close\" \n                        onClick={() => {this.props.cancelResetPassword()}}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\n                    <form onSubmit={this.handleLookUpAccount}>\n                    <label>\n                        Account Email Address: \n                        <input\n                        ref={this.emailRef}\n                        className=\"form-control form-text\"\n                        type=\"email\"\n                        size=\"35\"\n                        placeholder=\"Enter Email Address\"\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                        ref={this.emailRef}\n                        required={true}\n                        />\n                    </label>\n                    <button type=\"submit\" \n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>  \n        );   \n    }\n\n}\n\nexport default LookUpAccountDialog;\n","import React from 'react';\n\nclass SecurityQuestionDialog extends React.Component {\n    constructor() {\n        super();\n        this.securityAnswerRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //Focus cursor in email secrity answer field when mounted\n    componentDidMount() {\n        this.securityAnswerRef.current.focus();\n    }  \n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.securityAnswerRef.current.value === this.props.answer) {\n            this.props.getNewPassword();\n        } else {\n            this.securityAnswerRef.current.focus();\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Security Question: \n                        <textarea\n                        readOnly={true}\n                        value={this.props.question}\n                        className=\"form-control form-text\"\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <label>\n                        Security Answer: \n                        <textarea\n                        className=\"form-control form-text\"\n                        placeholder=\"Enter Security Question Answer\"\n                        ref={this.securityAnswerRef}\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <button role=\"submit\" \n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );        \n    }\n}\n export default SecurityQuestionDialog;","import React from 'react';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\n\nclass LoginPage extends React.Component {\n\nconstructor() {\n    super();\n    //Create a ref for the email input DOM element\n    this.emailInputRef = React.createRef();\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.passwordInputRef = React.createRef();\n    this.state = {statusMsg: \"\",\n                  loginBtnIcon: \"fa fa-sign-in\",\n                  loginBtnLabel: \"Log In\",\n                  showLookUpAccountDialog: false,\n                  showSecurityQuestionDialog: false,\n                  showResetPaswordDialog: false,\n                  githubIcon: \"fa fa-github\",\n                  githubLabel: \"Sign in with GitHub\",\n                  loginMsg: \"\",\n                  newAccountCreated: false\n                  };\n} \n    \n//Focus cursor in email input field when mounted\ncomponentDidMount() {\n    this.emailInputRef.current.focus();\n}  \n\n//handleLoginSubmit -- Called when user clicks on login button.\nhandleLoginSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\n                   loginBtnLabel: \"Logging In...\"});\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\n                \"&password=\" + this.passwordInputRef.current.value;\n    const res = await fetch(url, {method: 'POST'}); \n    if (res.status == 200) { //successful login!\n        window.open(\"/\",\"_self\");\n    } else { //Unsuccessful login\n      const resText = await res.text();\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\n                     loginBtnLabel: \"Log In\",\n                     statusMsg: resText});\n    }\n}\n\n  //accountCreateDone -- Called by child CreateAccountDialog component when \n  //user attempted to create new account. Hide the dialog and display \n  //a message indicating result of the attempt.\n  accountCreateDone = (msg) => {\n      this.setState({statusMsg: msg,\n                     showCreateAccountDialog: false});\n  }\n\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\n  cancelCreateAccount = () => {\n      this.setState({showCreateAccountDialog: false});\n  }\n\n//cancelResetPassword -- Called by one of the child three child dialog box components when\n//the user decides to cancel resetting their password. Toggles state so that all three\n//of the dialog boxes are hidden\ncancelResetPassword = () => {\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: false,\n                   showResetPaswordDialog: false});             \n}\n\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\n//provider\nhandleOAuthLogin = (provider) => {\n    window.open(`/auth/${provider}`,\"_self\");\n}\n\n//handleOAuthLoginClick -- Called whent the user clicks on button to\n//authenticate via a third-party OAuth service. The name of the provider is\n//passed in as a parameter.\nhandleOAuthLoginClick = (provider) => {\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\n                  [provider + \"Label\"] : \"Connecting...\"});\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\n}\n\n//getSecurityAnswer: Given the id, security question, and security answer obtained\n//from the LookUpAccountDialog component, update state such that the user will\n//next be prompted to enter security question and answer for verification\ngetSecurityAnswer = (userId, question, answer) => {\n    this.resetUserId = userId;\n    this.resetQ = question;\n    this.resetA = answer;\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: true\n                });\n}\n\n//getNewPassword-- Called after user successfully provides correct answer\n//to security question. Presents the \"Reset Password\" dialog box.\ngetNewPassword = () => {\n    this.setState({showSecurityQuestionDialog: false,\n                    showResetPaswordDialog: true});\n}\n\n//resetPassword--Called after the user successfully enters a new (acceptable)\n//password. pw contains the new password. Call on the Update (PUT) server\n//route to update the user's password in the database.\nresetPassword = async(pw) => {\n    const url = \"/users/\" + this.resetUserId;\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n        method: 'PUT',\n        body: JSON.stringify({password: pw})}); \n    if (res.status == 200) { //successful update creation!\n        this.setState({showResetPaswordDialog: false,\n                       statusMsg: \"Password successfully reset!\"});\n    } else { //Unsuccessful account creation\n        //Grab textual error message\n        const resText = await res.text();\n        this.setState({showResetPasswordDialog: false,\n                      statusMsg: resText});\n    }\n    \n}\n\n//newAccountCreated -- Called after successful creation of a new account\naccountCreateDone = (msg,deleted) => {\n    this.setState({statusMsg: msg,\n                   showCreateAccountDialog: false});\n}\n\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\ncloseStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n}\n\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\ncancelCreateAccount = () => {\n    this.setState({showCreateAccountDialog: false});\n}\n\n  render() {\n    return(\n        <div className=\"padded-page\" id=\"loginPage\">\n        <center>\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n            {this.state.showLookUpAccountDialog ? \n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\n            {this.state.showSecurityQuestionDialog ? \n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\n                                       question={this.resetQ}\n                                       answer={this.resetA}\n                                       getNewPassword={this.getNewPassword}/> : null}\n            {this.state.showResetPaswordDialog ? \n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\n                                   resetPassword={this.resetPassword} /> : null}\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\n                Email:\n                <input\n                id=\"userEmail\"\n                ref={this.emailInputRef}\n                className=\"form-control login-text\"\n                type=\"email\"\n                placeholder=\"Enter Email Address\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                />\n            </label>\n            <p />\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\n                Password:\n                <input\n                id=\"userPassword\"\n                ref={this.passwordInputRef}\n                className=\"form-control login-text\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\n                required={true}\n                />\n            </label>\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\n            <button \n                type=\"submit\"\n                id=\"loginBtn\"\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\n                &nbsp;{this.state.loginBtnLabel}\n            </button>\n            <p>\n            <button type=\"button\" id=\"createAccountBtn\" className=\"btn btn-link login-link\" \n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\n                Create an account</button> | \n                <button type=\"button\" className=\"btn btn-link login-link\"\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\n                Reset your password</button>\n            </p>  \n            <button type=\"button\" className=\"btn btn-github\"\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\n              <span className={this.state.githubIcon}></span>&nbsp;\n                {this.state.githubLabel}\n            </button>\n            <p>\n                <i>Version CptS 489</i>\n            </p>\n            </form>\n            {this.state.showCreateAccountDialog ? \n              <CreateEditAccountDialog\n                create={true} \n                done={this.accountCreateDone}\n                cancel={this.cancelCreateAccount} /> : null}\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\n        </center>\n        </div>\n        )\n    }\n} \n\nexport default LoginPage;\n","import React from 'react';\n\nclass FeedPage extends React.Component {\n\n    render() {\n        return (\n        <div className=\"padded-page\">\n            <center>\n            <h1 >Activity Feed</h1>\n            <h2>This page is under construction.</h2>\n            <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" \n             height=\"200\" width=\"200\"/>\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\n            </center>\n        </div>\n        );\n    }   \n}\n\nexport default FeedPage;","import React from 'react';\n\nclass ConfirmDeleteRound extends React.Component {\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete this round?</p>\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\n                  Yes, Delete</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteRound;","import React from 'react';\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\nimport AppMode from './../AppMode.js';\n\nclass RoundsTable extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {showConfirmDelete: false};\n  }\n\n  //editRound -- Triggered when the user clicks the edit button for a given\n  //round. The id param is the unique property that identifies the round.\n  //Set the state variable representing the id of the round to be edited and\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\n  //chosen round.\n  editRound = (id) => {\n    this.props.setEditId(id);\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\n  }\n\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\n  //button in the Confirm Delete dialog box. It executes the deletion and\n  //closes the dialog box.\n  deleteRound = () => {\n    this.props.deleteRound();\n    this.setState({showConfirmDelete: false});\n  }\n\n\n  //confirmDelete -- Triggered when the user clicks the delete button\n  //for a given round. The id paam is the unique property that \n  //identifies the round. Set the state variable representing the id\n  //of the round to be deleted and then present a dialog box asking\n  //the user to confirm the deletion.\n  confirmDelete = (id) => {\n    this.props.setDeleteId(id);\n    this.setState({showConfirmDelete: true});\n  }\n\n\n  //renderTable -- render an HTML table displaying the rounds logged\n  //by the current user and providing buttons to view/edit and delete each round.\n  renderTable = () => {\n  let table = [];\n  for (let r = 0; r < this.props.rounds.length; ++r) {\n    table.push(\n      <tr key={r}>\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\n        <td>{this.props.rounds[r].course}</td>\n        <td>{(Number(this.props.rounds[r].strokes) + \n              Number(this.props.rounds[r].minutes)) +\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \" (\" + \n              this.props.rounds[r].strokes + \n              \" in \" + this.props.rounds[r].minutes + \":\" + \n              (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \")\"}\n        </td>\n        <td><button onClick={this.props.menuOpen ? null : () => \n          this.editRound(r)}>\n              <span className=\"fa fa-eye\"></span></button></td>\n        <td><button onClick={this.props.menuOpen ? null : \n          () => this.confirmDelete(r)}>\n              <span className=\"fa fa-trash\"></span></button></td>\n      </tr> \n    );\n  }\n  return table;\n  }\n\n  //render--render the entire rounds table with header, displaying a \"No\n  //Rounds Logged\" message in case the table is empty.\n  render() {\n    return(\n    <div className=\"padded-page\">\n      <h1></h1>\n      <table className=\"table table-hover\">\n        <thead className=\"thead-light\">\n        <tr>\n          <th>Date</th>\n          <th>Course</th>\n          <th>Score</th>\n          <th>View/Edit...</th>\n          <th>Delete</th>\n        </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.props.rounds).length === 0 ? \n          <tr>\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\n          </tr> : this.renderTable()\n          }\n        </tbody>\n      </table>\n      {this.state.showConfirmDelete ?\n        <ConfirmDeleteRound \n          close={() => this.setState({showConfirmDelete: false})} \n          deleteRound={this.deleteRound} /> : null}\n    </div>\n    );\n  }\n}\n\nexport default RoundsTable;\n","import React from 'react';\nimport AppMode from './../AppMode.js';\n\nclass RoundForm extends React.Component {\n  constructor(props) {\n  super(props);\n  //Create date object for today, taking time zone into consideration\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n  //store date as ISO string\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n    //If logging a new round, the starting state is a default round with\n    //today's date.\n    this.state = {date:  today.toISOString().substr(0,10), \n                  course: \"\",\n                  type: \"practice\",\n                  holes: \"18\",\n                  strokes: 80,\n                  minutes: 50,\n                  seconds: \"00\",\n                  notes: \"\",\n                  faIcon: \"fa fa-save\",\n                  btnLabel: \"Save Round Data\"}\n  } else {\n    //if editing an existing round, the starting state is the round's\n    //current data\n    let thisRound = {...this.props.startData};\n    delete thisRound.id;\n    thisRound.faIcon = \"fa fa-edit\";\n    thisRound.btnLabel = \"Update Round Data\";\n    this.state = thisRound;\n  }\n}\n  \n  \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n          let newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                       newSec);\n          this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n          let newStrokes = event.target.value;\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n          this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            let newMin = event.target.value;\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \n              this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n          this.setState({[name]: event.target.value});\n        }\n    }\n  \n  \n    //handleSubmit -- When the user clicks on the button to save/update the\n    //round, start the spinner and invoke the parent component's saveRound\n    //method to do the actual work. Note that saveRound is set to the correct\n    //parent method based on whether the user is logging a new round or editing\n    //an existing round.\n    handleSubmit = (event) => {\n        //start spinner\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                                    \"Saving...\" : \"Updating...\")});\n        //Prepare current round data to be saved\n        let roundData = this.state;\n        delete roundData.faIcon;\n        delete roundData.btnLabel;\n        //call saveRound on 1 second delay to show spinning icon\n        setTimeout(this.props.saveRound,1000,roundData); \n        event.preventDefault(); \n        }\n  \n\n    computeSGS = (strokes, min, sec) => {\n      return (Number(strokes) + Number(min)) \n                  + \":\" + sec;\n    }\n  \n    render() {\n      return (\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n          <center>\n            <label>\n              Date:\n              <input name=\"date\" className=\"form-control form-center\" \n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\n            </label>\n            <p></p>\n            <label>\n              Course:\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\n                value={this.state.course} onChange={this.handleChange}\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\n            </label>\n          <p></p>\n          <label>Type:\n          <select name=\"type\" value={this.state.type} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"practice\">Practice</option>\n            <option value=\"tournament\">Tournament</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Holes:\n          <select name=\"holes\" value={this.state.holes} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"9\">9</option>\n            <option value=\"18\">18</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Strokes:\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \n            min=\"9\" max=\"200\" value={this.state.strokes} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Time: <br></br>\n          <input name=\"minutes\" type=\"number\" size=\"3\"\n            min=\"10\" max=\"400\" value={this.state.minutes}\n            onChange={this.handleChange} />:  \n          <input name=\"seconds\" type=\"number\" size=\"2\"\n            min=\"0\" max=\"60\" value={this.state.seconds} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Speedgolf Score: <br></br>\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\n          </label>\n          <p></p>\n          <label>Notes:\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                placeholder=\"Enter round notes\" value={this.state.notes} \n                onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <p></p>\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n            className=\"btn btn-primary btn-color-theme\">\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\n          </button>\n          </center>\n        </form>\n      );\n    }\n}\n\nexport default RoundForm;","import React from 'react';\n\nclass FloatingButton extends React.Component {\n    render() {\n      return(\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\n        </div>  \n      );\n    }\n}\n\nexport default FloatingButton;\n","//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from './../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.deleteId = \"\";\n        this.editId = \"\";\n        this.state = {errorMsg: \"\"};           \n    }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.setState({errorMsg: \"\"});\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.deleteId]._id;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \n            + msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }  \n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.deleteId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.editId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    closeErrorMsg = () => {\n        this.setState({errorMsg: \"\"});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n                    <RoundsTable \n                        rounds={this.props.userObj.rounds}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n","import React from 'react';\n\nclass CoursesPage extends React.Component {\n\n    render() {\n        return (\n        <div className=\"padded-page\">\n            <center>\n            <h1 >Courses</h1>\n            <h2>This page is under construction.</h2>\n            <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" \n             height=\"200\" width=\"200\"/>\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\n            </center>\n        </div>\n        );\n    }   \n}\n\nexport default CoursesPage;","import React from 'react';\n\nclass AboutBox extends React.Component {\n\nrender() {\n    return (\n        <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h3>About SpeedScore</h3>\n                <button className=\"modal-close\" onClick={this.props.close}>\n                    &times;\n                </button>\n            </div>\n            <div className=\"modal-body\">\n                <img\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\n                height=\"200\" width=\"200\"/>\n                <h3>The World's First and Only Suite of Apps for\n                Speedgolf</h3>\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\n                &copy; 2017-20 The Professor of Speedgolf. All rights\n                reserved.\n                </p>\n                <div style={{textAlign: \"left\"}}>\n                <p>SpeedScore apps support</p>\n                <ul>\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\n                <li>tracking personal speedgolf rounds and sharing results\n                (<i>SpeedScore Track&reg;</i>)</li>\n                <li>finding speedgolf-friendly courses, booking tee times, and\n                paying to play speedgolf by the minute (<i>SpeedScore\n                Play&reg;</i>)</li>\n                </ul>\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\n                associate professor of computer science at Washington State\n                University and the <i>Professor of Speedgolf</i>, with support\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\n                <p>For more information on SpeedScore, visit <a\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\n                site</a>. For more information on speedgolf, visit <a\n                href=\"http://playspeedgolf.com\"\n                target=\"_blank\">playspeedgolf.com</a> and <a\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\n                USA</a>.</p>\n                </div>\n            </div>\n            <div className=\"modal-footer\">\n                <button className=\"btn btn-primary btn-color-theme\"\n                onClick={this.props.close}>OK</button>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nexport default AboutBox;","import React from 'react';\n\nclass LocationSearch extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            searchVal: \"\",\n            searchResult: {},\n            validSearch: false,\n            mapUrl: ''\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        let result = await fetch('location/' + this.state.searchVal)\n\n        if (result.status === 200) {\n            let text = await result.text();\n            let parsedText = JSON.parse(text);\n            result = await fetch('map/' + parsedText.candidates[0].formatted_address);\n            let mapUrl = await result.text();\n            this.setState({ searchResult: JSON.parse(text), validSearch: true, mapUrl: mapUrl});\n        } else {\n            this.setState({ searchResult: {}, validSearch: false, mapUrl: \"\"});\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n\n    displayResults = () => {\n        return (\n            <div>\n                <div>Name: {this.state.searchResult.candidates[0].name}</div>\n                <div>Address: {this.state.searchResult.candidates[0].formatted_address}</div>\n                <div>Latitude: {this.state.searchResult.candidates[0].geometry.location.lat}</div>\n                <div>Longitude: {this.state.searchResult.candidates[0].geometry.location.lng}</div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"padded-page\">\n                <center>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>Enter a search<br />\n                            <input className=\"form-control form-text form-center\"\n                                name=\"searchVal\"\n                                type=\"text\"\n                                value={this.state.searchVal}\n                                onChange={this.handleChange}>\n                            </input>\n                        </label>\n                        <br />\n                        <button role=\"submit\">Submit</button>\n                    </form>\n                    {this.state.validSearch ? this.displayResults() : null}\n                    <iframe\n                        width=\"400\"\n                        height=\"300\"\n                        frameborder=\"0\" style={{border: 0}}\n                        src={this.state.mapUrl} allowfullscreen>\n                    </iframe> \n                </center>\n            </div>\n        )\n    }\n}\n\nexport default LocationSearch;","import React from 'react';\nimport NavBar from './NavBar.js';\nimport SideMenu from './SideMenu.js';\nimport ModeBar from './ModeBar.js';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\nimport LoginPage from './LoginPage.js';\nimport AppMode from \"./../AppMode.js\"\nimport FeedPage from './FeedPage.js';\nimport Rounds from './Rounds.js';\nimport CoursesPage from './CoursesPage.js';\nimport AboutBox from './AboutBox.js';\nimport LocationSearch from './LocationSearch.js';\n\nconst modeTitle = {};\nmodeTitle[AppMode.LOGIN] = \"URScene Login\";\nmodeTitle[AppMode.FEED] = \"Events near you\";\nmodeTitle[AppMode.ROUNDS] = \"My events\";\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Enter new event\";\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Event\";\nmodeTitle[AppMode.COURSES] = \"Venues\";\nmodeTitle[AppMode.LOCATION_SEARCH] = \"Location Search\"\n\nconst modeToPage = {};\nmodeToPage[AppMode.LOGIN] = LoginPage;\nmodeToPage[AppMode.FEED] = FeedPage;\nmodeToPage[AppMode.ROUNDS] = Rounds;\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\nmodeToPage[AppMode.COURSES] = CoursesPage;\nmodeToPage[AppMode.LOCATION_SEARCH] = LocationSearch;\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {mode: AppMode.LOGIN,\n                  menuOpen: false,\n                  authenticated: false,\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\n                  editAccount: false,\n                  showEditAccountDialog: false,\n                  statusMsg: \"\",\n                  showAboutDialog: false\n                 };\n  }\n\n  //componentDidMount\n  componentDidMount() {\n    if (!this.state.authenticated) { \n      //Use /auth/test route to (re)-test authentication and obtain user data\n      fetch(\"/auth/test\")\n        .then((response) => response.json())\n        .then((obj) => {\n          if (obj.isAuthenticated) {\n            this.setState({\n              userObj: obj.user,\n              authenticated: true,\n              mode: AppMode.FEED //We're authenticated so can get into the app.\n            });\n          }\n        }\n      )\n    } \n  }\n\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \n  //the database. The function calls the users/:userid (GET) route to update \n  //the userObj state var based on the latest database changes, and sets the \n  //mode state var is set to newMode. After this method is called, the\n  //App will re-render itself, forcing the new data to \n  //propagate to the child components when they are re-rendered.\n  refreshOnUpdate = async(newMode) => {\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\n    response = await response.json();\n    const obj = JSON.parse(response);\n    this.setState({\n      userObj: obj,\n      mode: newMode\n    });\n  }\n\n\n  handleChangeMode = (newMode) => {\n    this.setState({mode: newMode});\n  }\n\n  openMenu = () => {\n    this.setState({menuOpen : true});\n  }\n  \n  closeMenu = () => {\n    this.setState({menuOpen : false});\n  }\n\n  toggleMenuOpen = () => {\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\n  }\n\n  setUserId = (Id) => {\n    this.setState({userId: Id,\n                   authenticated: true});\n  }\n\n  showEditAccount = () => {\n    this.setState({showEditAccountDialog: true});\n\n  }\n\n  cancelEditAccount = () => {\n    this.setState({showEditAccountDialog: false});\n  }\n\n  //editAccountDone -- called after successful edit or\n  //deletion of user account. msg contains the status\n  //message and deleted indicates whether an account was\n  //edited (deleted == false) or deleted (deleted == true)\n  editAccountDone = (msg, deleted) => {\n    if (deleted) {\n      this.setState({showEditAccountDialog: false,\n                     statusMsg: msg,\n                     mode: AppMode.LOGIN});\n      } else {\n        this.setState({showEditAccountDialog: false,\n          statusMsg: msg});\n      }\n  }\n\n  closeStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n  }\n\n  render() {\n    const ModePage = modeToPage[this.state.mode];\n    return (\n      <div>\n        {this.state.showAboutDialog ? \n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\n              <span>{this.state.statusMsg}</span>\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                  <span className=\"fa fa-times\"></span></button></div> : null}\n        {this.state.showEditAccountDialog ? \n            <CreateEditAccountDialog \n              create={false} \n              userId={this.state.userObj.id} \n              done={this.editAccountDone} \n              cancel={this.cancelEditAccount}/> : null}\n        <NavBar \n          title={modeTitle[this.state.mode]} \n          mode={this.state.mode}\n          changeMode={this.handleChangeMode}\n          menuOpen={this.state.menuOpen}\n          toggleMenuOpen={this.toggleMenuOpen}/>\n          <SideMenu \n            menuOpen = {this.state.menuOpen}\n            mode={this.state.mode}\n            toggleMenuOpen={this.toggleMenuOpen}\n            displayName={this.state.userObj.displayName}\n            profilePicURL={this.state.userObj.profilePicURL}\n            localAccount={this.state.userObj.authStrategy === \"local\"}\n            editAccount={this.showEditAccount}\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\n            showAbout={() => {this.setState({showAboutDialog: true})}}\n            changeMode={this.handleChangeMode}/>\n          <ModeBar \n            mode={this.state.mode} \n            changeMode={this.handleChangeMode}\n            menuOpen={this.state.menuOpen}/>\n          <ModePage \n            menuOpen={this.state.menuOpen}\n            mode={this.state.mode}\n            changeMode={this.handleChangeMode}\n            userObj={this.state.userObj}\n            refreshOnUpdate={this.refreshOnUpdate}/>\n      </div>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './styles/index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}