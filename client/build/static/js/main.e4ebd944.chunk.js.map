{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/Checkbox.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/LocationSearch.js","components/VenueAccount.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","LOCATION_SEARCH","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","accountType","VenueAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","Checkbox","label","isSelected","onCheckboxChange","name","checked","genreList","artistList","venueList","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","genres","Array","from","selectedOptions","item","GPSvalidate","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","showFanDialog","showArtistDialog","showVenueDialog","userData","artists","venues","keys","genreCheckboxes","filter","checkbox","forEach","console","log","push","artistCheckboxes","venueCheckboxes","artistName","instagramHandle","facebookHandle","streetAddress","phoneNumber","socialMediaLinks","lat","long","JSON","stringify","url","create","fetch","headers","method","body","res","status","done","text","resText","accountName","confirmDelete","confirmDeleteAccount","e","handleAccountType","renderFanDialog","cancel","onSubmit","map","createGenreCheckbox","selectAllGenre","deselectAllGenre","createArtistCheckbox","selectAllArtist","deselectAllArtist","createVenueCheckbox","selectAllVenue","deselectAllVenue","renderArtistDialog","size","placeholder","required","data","parse","validAddress","candidates","geometry","location","lng","renderVenueDialog","selectAllGenreCheckboxes","prevState","selectAllArtistCheckboxes","selectAllVenueCheckboxes","handleGenreCheckboxChange","changeEvent","handleArtistCheckboxChange","handleVenueCheckboxChange","option","key","newUserRef","reduce","options","json","userId","autocomplete","pattern","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","rounds","date","substring","course","Number","strokes","minutes","seconds","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","updateUserLocation","position","coords","latitude","longitude","getVenuesNearMe","distance","venuesNearMe","renderVenues","venue","user","computeDistance","subscribe","accountObj","toString","venueSearchResult","validSearch","undefined","search","noEvents","submitBtnIcon","navigator","geolocation","getCurrentPosition","err","venueLat","venueLong","LatLng","to","computeDistanceBetween","AboutBox","textAlign","href","LocationSearch","searchResult","searchType","searchVal","eventSearchResult","displayResults","formatted_address","showSearch","getEventsNearMe","events","noEventsFound","eventIDs","eventId","eventsNearMe","showNearMe","renderSearch","renderEvents","newEvent","renderNearMe","mapUrl","venueId","time","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","showVenueAccount","showVenueAccountDialog","cancelEditAccount","cancelVenueAccount","editAccountDone","editAccount","showAboutDialog","then","isAuthenticated","ModePage","componentDidMount","localAccount","Boolean","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4ebd944.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\",\r\n    LOCATION_SEARCH: \"LocationSearchMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          \r\n          {(this.props.accountType === \"venue\") ? \r\n          <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.VenueAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;venue</a>\r\n              :null}\r\n          \r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a className=\"sidemenu-item\" onClick={() => {this.props.changeMode(AppMode.LOCATION_SEARCH)}}>\r\n            Location Search\r\n          </a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Coming Up</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-music\"></span>\r\n          <span className=\"modebar-text\">Events</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-map-marker\"></span>\r\n          <span className=\"modebar-text\">Venues</span>\r\n        </a> \r\n        <a className={(this.props.mode === AppMode.LOCATION_SEARCH ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.LOCATION_SEARCH)}>\r\n          <span className=\"modebar-icon  fa fa-map-o\"></span>\r\n          <span className=\"modebar-text\">Location/Event Finder</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","// All Checkbox was inherited from http://react.tips/checkboxes-in-react-16/\r\nimport React, { Component, PropTypes } from 'react';\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <div className=\"form-check\">\r\n    <label>\r\n      <input\r\n        id=\"checkbox\"\r\n        type=\"checkbox\"\r\n        name={label}\r\n        checked={isSelected}\r\n        onChange={onCheckboxChange}\r\n        className=\"form-check-input\"\r\n      />\r\n      {label}\r\n    </label>\r\n  </div>\r\n);\r\nexport default Checkbox;\r\n","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport Checkbox from './Checkbox.js';\r\n\r\nconst genreList = [\r\n    'Pop',\r\n    'Hip Hop',\r\n    'Rap',\r\n    'Rock',\r\n    'EDM',\r\n    'Country',\r\n    'RnB',\r\n    'Metal'\r\n];\r\nconst artistList = [\r\n    'Post Malone',\r\n    'Ariana Grande', \r\n    'Taylor Swift',\r\n    'Kanye West',\r\n    'Jay-Z',\r\n    'Lil Wayne', \r\n    'Nicki Minaj',\r\n    'Snoop Dog'\r\n];\r\nconst venueList = [\r\n    'Red Rocks Park and Amphitheatre',\r\n    'Hollywood Bowl',\r\n    'Merriweather Post Pavilion',\r\n    'The Showbox',\r\n    'The Underground'\r\n]\r\n\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      accountType: \"fan\",\r\n                      url: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false,\r\n                      showFanDialog: false,\r\n                      showArtistDialog: false,\r\n                      showVenueDialog: false,\r\n                      genres: [],\r\n                      artists: [],\r\n                      venues: [],\r\n                      genreCheckboxes: genreList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {}),\r\n                      artistCheckboxes: artistList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {}),\r\n                      venueCheckboxes: venueList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {})\r\n                    };\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = this.state.url;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer,\r\n                           accountType: userData.accountType,\r\n                           url: '/' + userData.accountType + 's/' + this.state.accountName});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else if (event.target.name === \"genres\") {\r\n            this.setState({genres: Array.from(event.target.selectedOptions, (item) => item.value)});\r\n        } else if(event.target.name === \"streetAddress\"){\r\n            this.GPSvalidate();\r\n            this.setState({[event.target.name]: event.target.value,\r\n                formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n        else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        this.setState({showFanDialog: false, showArtistDialog: false, showVenueDialog: false})\r\n        //Initialize account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer,\r\n            accountType: this.state.accountType,\r\n        };\r\n        if (this.state.accountType == \"fan\") {\r\n            userData.genres = this.state.genres;\r\n            userData.artists = this.state.artists;\r\n            userData.venues = this.state.venues;\r\n            Object.keys(this.state.genreCheckboxes).filter(checkbox => this.state.genreCheckboxes[checkbox]).forEach(checkbox => {\r\n                console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                this.state.genres.push(checkbox);\r\n            });\r\n            Object.keys(this.state.artistCheckboxes).filter(checkbox => this.state.artistCheckboxes[checkbox]).forEach(checkbox => {\r\n                console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                this.state.artists.push(checkbox);\r\n            });\r\n            Object.keys(this.state.venueCheckboxes).filter(checkbox => this.state.venueCheckboxes[checkbox]).forEach(checkbox => {\r\n                console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                this.state.venues.push(checkbox);\r\n            });\r\n        }\r\n        if (this.state.accountType == \"artist\") {\r\n            userData.artistName = this.state.artistName;\r\n            userData.genres = this.state.genres;\r\n            userData.instagramHandle = this.state.instagramHandle;\r\n            userData.facebookHandle = this.state.facebookHandle;  \r\n        }\r\n        if (this.state.accountType == \"venue\") {\r\n            userData.streetAddress = this.state.streetAddress;\r\n            userData.email = this.state.email;\r\n            userData.phoneNumber = this.state.phoneNumber;\r\n            userData.socialMediaLinks = this.state.socialMediaLinks;\r\n            userData.lat = this.state.lat;\r\n            userData.long = this.state.long;\r\n        }\r\n        console.log('user data: ' + JSON.stringify(userData))\r\n        const url = this.state.url;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = this.state.url;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\" id=\"createNewAccountDialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleAccountType}>\r\n            <label>\r\n                Account Type:\r\n                <select name=\"accountType\" id=\"accountType\" value={this.state.accountType} \r\n                    className=\"form-control form-textform-center\" \r\n                    onChange={this.handleChange}>\r\n                    <option id=\"fan\" value=\"fan\">Fan</option>\r\n                    <option id=\"artist\" value=\"artist\">Artist</option>\r\n                    <option id=\"venue\" value=\"venue\">Venue</option>\r\n                </select> \r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Email: \r\n                <input\r\n                id=\"emailInput\"  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                id=\"passwordInput\"\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                id=\"repeatPasswordInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                id=\"displayNameInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                id=\"profilePic\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                id=\"securityQInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                id=\"securityAInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" id=\"submitAccountBtn\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName} deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}/> : null}\r\n        {this.state.showFanDialog ? this.renderFanDialog() : null}\r\n        {this.state.showArtistDialog ? this.renderArtistDialog() : null}\r\n        {this.state.showVenueDialog ? this.renderVenueDialog() : null}\r\n    </div>\r\n    );\r\n}\r\n\r\nhandleAccountType = (event) => {\r\n    event.preventDefault();\r\n    if (this.state.accountType == \"fan\") {\r\n        this.setState({showFanDialog: true,\r\n            url: '/fans/' + this.state.accountName,\r\n            genres: [],\r\n            artists: [],\r\n            venues: []});\r\n    }\r\n    if (this.state.accountType == \"artist\") {\r\n        this.setState({showArtistDialog: true,\r\n            url: '/artists/' + this.state.accountName,\r\n            artistName: \"\",\r\n            genres: [],\r\n            instagramHandle: \"\",\r\n            facebookHandle: \"\"});\r\n    }\r\n    if (this.state.accountType == \"venue\") {\r\n        this.setState({showVenueDialog: true,\r\n            url: '/venues/' + this.state.accountName,\r\n            streetAddress: \"\",\r\n            email: \"\",\r\n            phoneNumber: \"\",\r\n            socialMediaLinks: \"\"\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nrenderFanDialog = () => {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\" id=\"renderFanDialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Fan Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.handleSubmit}>\r\n        <br/>\r\n        <label>\r\n            Genres:\r\n        </label>\r\n        {genreList.map(this.createGenreCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllGenresBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllGenreBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllGenre}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllGenreBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllGenre}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <label>\r\n            Artists:\r\n        </label>\r\n        {artistList.map(this.createArtistCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllArtistsBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllArtistBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllArtist}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllArtistBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllArtist}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <label>\r\n            Venues:\r\n        </label>\r\n        {venueList.map(this.createVenueCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllVenuesBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllVenueBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllVenue}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllVenueBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllVenue}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <button role=\"submit\" id=\"fanAccountBtn\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            &nbsp;Create Fan Account</button>\r\n        </form>\r\n    </div></div></div>\r\n    );\r\n}\r\n\r\nrenderArtistDialog = () => {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Artist Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.handleSubmit}>\r\n        <br/>\r\n        <label>\r\n            Artist Name:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"artistName\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"Artist Name\"\r\n            required={true}\r\n            value={this.state.artistName}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Genres:\r\n            {genreList.map(this.createGenreCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllGenresBtn\"\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllGenre}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllGenresBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllGenre}\r\n                > Deselect All </button>\r\n            </div>\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Instagram:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"instagramHandle\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"@your-handle\"\r\n            required={true}\r\n            value={this.state.instagramHandle}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Facebook:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"facebookHandle\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"@your-handle\"\r\n            required={true}\r\n            value={this.state.facebookHandle}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <button role=\"submit\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            &nbsp;Create Artist Account</button>\r\n        </form>\r\n        </div></div></div>\r\n    );\r\n}\r\n\r\nGPSvalidate = async () => {\r\n    let result = await fetch('location/' + this.state.streetAddress)\r\n    if (result.status === 200) {\r\n        let data = JSON.parse(await result.text());\r\n        this.setState({validAddress: true, lat: data.candidates[0].geometry.location.lat, long: data.candidates[0].geometry.location.lng});\r\n    }\r\n    else{\r\n        this.setState({validAddress: false});\r\n    }\r\n}\r\n\r\nrenderVenueDialog = () => { \r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Create Venue Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.handleSubmit}>\r\n        Street Address:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"streetAddress\"\r\n                id = \"streetAddress\"\r\n                type=\"text\"\r\n                size=\"40\"\r\n                placeholder=\"123 Example St. Portland, OR\"\r\n                required={true}\r\n                value={this.state.streetAddress}\r\n                onChange={this.handleChange}\r\n                />\r\n        Email:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Email\"\r\n                required={true}\r\n                value={this.state.email}\r\n                onChange={this.handleChange}\r\n                />\r\n        Phone:\r\n        <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"phoneNumber\"\r\n                id=\"phoneNumber\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"666-777-1337\"\r\n                required={true}\r\n                value={this.state.phoneNumber}\r\n                onChange={this.handleChange}\r\n                />\r\n        Social Media Links:\r\n        <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"socialMediaLinks\"\r\n                id=\"socialMediaLinks\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Facebook, Instagram, Etc.\"\r\n                required={true}\r\n                value={this.state.socialMediaLinks}\r\n                onChange={this.handleChange}\r\n                />\r\n        <p></p>\r\n        {this.state.validAddress ? \r\n        <button role=\"submit\" id=\"venueSubmitBtn\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            &nbsp;Create Venue Account</button>\r\n             : null}\r\n        </form>\r\n        </div></div></div>\r\n    );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Create Account Page checkboxes\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Functions for select all checkboxes for genre/artist/venue\r\nselectAllGenreCheckboxes = isSelected => {\r\n    Object.keys(this.state.genreCheckboxes).forEach(checkbox => {\r\n      // BONUS: Can you explain why we pass updater function to setState instead of an object?\r\n      this.setState(prevState => ({\r\n        genreCheckboxes: {\r\n          ...prevState.genreCheckboxes,\r\n          [checkbox]: isSelected\r\n        }\r\n      }));\r\n    });\r\n  };\r\n  selectAllArtistCheckboxes = isSelected => {\r\n    Object.keys(this.state.artistCheckboxes).forEach(checkbox => {\r\n      this.setState(prevState => ({\r\n        artistCheckboxes: {\r\n          ...prevState.artistCheckboxes,\r\n          [checkbox]: isSelected\r\n        }\r\n      }));\r\n    });\r\n  };\r\n  selectAllVenueCheckboxes = isSelected => {\r\n    Object.keys(this.state.venueCheckboxes).forEach(checkbox => {\r\n      // BONUS: Can you explain why we pass updater function to setState instead of an object?\r\n      this.setState(prevState => ({\r\n        venueCheckboxes: {\r\n          ...prevState.venueCheckboxes,\r\n          [checkbox]: isSelected\r\n        }\r\n      }));\r\n    });\r\n  };\r\n\r\n  // Function to update state for select/deselect all checkboxes genre/artist/venue\r\n  selectAllGenre = () => this.selectAllGenreCheckboxes(true);\r\n\r\n  deselectAllGenre = () => this.selectAllGenreCheckboxes(false);\r\n\r\n  selectAllArtist = () => this.selectAllArtistCheckboxes(true);\r\n\r\n  deselectAllArtist = () => this.selectAllArtistCheckboxes(false);\r\n\r\n  selectAllVenue = () => this.selectAllVenueCheckboxes(true);\r\n\r\n  deselectAllVenue = () => this.selectAllVenueCheckboxes(false);\r\n\r\n  // Functions to handle checkboxe changes genre/artist/venue\r\n  handleGenreCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      genreCheckboxes: {\r\n        ...prevState.genreCheckboxes,\r\n        [name]: !prevState.genreCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  handleArtistCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      artistCheckboxes: {\r\n        ...prevState.artistCheckboxes,\r\n        [name]: !prevState.artistCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  handleVenueCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      venueCheckboxes: {\r\n        ...prevState.venueCheckboxes,\r\n        [name]: !prevState.venueCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Functions for creating a single checkboxe for genre/artist/venue\r\n  createGenreCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.genreCheckboxes[option]}\r\n      onCheckboxChange={this.handleGenreCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n  createArtistCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.artistCheckboxes[option]}\r\n      onCheckboxChange={this.handleArtistCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n  createVenueCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.venueCheckboxes[option]}\r\n      onCheckboxChange={this.handleVenueCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n}\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div className=\"padded-page\" id=\"loginPage\">\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                id=\"userEmail\"\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                id=\"userPassword\"\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button \r\n                type=\"submit\"\r\n                id=\"loginBtn\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" id=\"createAccountBtn\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport { LatLng, computeDistanceBetween } from 'spherical-geometry-js';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            venueSearchResult: null,\r\n            validSearch: false,\r\n            lat: undefined,\r\n            long: undefined,\r\n            search: false,\r\n            distance: 20,\r\n            venuesNearMe: [],\r\n            noEvents: false,\r\n            statusMsg: \"\",\r\n            submitBtnIcon: \"fa fa-bookmark-o\"\r\n        }\r\n    }    \r\n\r\n    componentDidMount() {\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(this.updateUserLocation, function (err) {\r\n                console.log('Geolocation error: ' + err);\r\n            });\r\n        } else {\r\n            console.log(\"Geolocation Not Available\");\r\n        }\r\n    }\r\n\r\n    updateUserLocation = (position) => {\r\n        this.setState({ lat: position.coords.latitude, long: position.coords.longitude }, this.getVenuesNearMe)\r\n    }\r\n\r\n    computeDistance(venueLat, venueLong) {\r\n        let from = new LatLng(this.state.lat, this.state.long)\r\n        let to = new LatLng(venueLat, venueLong);\r\n        let distance = computeDistanceBetween(from, to);\r\n        return distance*0.000621371;\r\n    }\r\n\r\n    // Called as soon as user location data is recieved\r\n    getVenuesNearMe = async () => {\r\n        if (this.state.lat && this.state.long) {\r\n            let res = await fetch('/venues/nearme/' + this.state.distance, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ lat: this.state.lat, long: this.state.long }),\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            if (res.status === 200) {\r\n                let venues = await res.text()\r\n                this.setState({ venuesNearMe: JSON.parse(venues) })\r\n            } else {\r\n                this.setState({ venuesNearMe: [] })\r\n            }\r\n        }\r\n    }\r\n\r\n    renderVenues = () => {\r\n        let table = [];\r\n        for (let venue of this.state.venuesNearMe) {\r\n            table.push(\r\n                <tr key={venue}>\r\n                    <td>{venue.user.displayName}</td>\r\n                    <td>{venue.streetAddress}</td>\r\n                    <td>{this.computeDistance(venue.lat, venue.long)}</td>\r\n                    <td><button onClick={() => this.subscribe(venue)}><span className=\"fa fa-bookmark-o\"></span></button></td>\r\n                </tr>\r\n            )\r\n        }\r\n        if (table.length > 0) {\r\n            return table;\r\n        } else {\r\n            return (<div>No Nearby Venues Found :(</div>)\r\n        }\r\n    }\r\n\r\n    subscribe = async (venue) => {\r\n        console.log(this.props.accountObj);\r\n        console.log(this.props.accountObj._id);\r\n        console.log(this.props.accountObj.user.id);\r\n        if (this.props.accountType === \"fan\") {\r\n            this.props.accountObj.venues.push(venue._id.toString());\r\n            let data = {venues: this.props.accountObj.venues}\r\n            const url = '/fans/' + this.props.accountObj.user.id\r\n            const res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(data)}); \r\n            const msg = await res.text();\r\n            if (res.status != 200) {\r\n                this.setState({statusMsg: msg});\r\n            } else {\r\n                this.props.refreshOnUpdate(AppMode.COURSES);\r\n                this.setState({statusMsg: \"Successfully subscribed to \" + venue.user.displayName + \"!\"});\r\n            }\r\n        }\r\n        else {\r\n            this.setState({statusMsg: \"Oops! Please sign in on your Fan Account to subscribe to other Venues.\"});\r\n        }\r\n    }\r\n\r\n    closeStatusMsg = () => {\r\n        this.setState({statusMsg: \"\"});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padded-page\">\r\n            <h1>Subscribe To Your Nearby Venues</h1>\r\n            <table className=\"table table-hover\">\r\n              <thead className=\"thead-light\">\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Address</th>\r\n                <th>Distance (in miles)</th>\r\n                <th>Subscribe</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.renderVenues()}\r\n              </tbody>\r\n            </table>\r\n            {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n          </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport { LatLng, computeDistanceBetween } from 'spherical-geometry-js';\r\n\r\nclass LocationSearch extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            searchVal: \"\",\r\n            eventSearchResult: null,\r\n            venueSearchResult: null,\r\n            validSearch: false,\r\n            mapUrl: '',\r\n            lat: undefined,\r\n            long: undefined,\r\n            search: false,\r\n            distance: 5,\r\n            venuesNearMe: [],\r\n            eventsNearMe: [],\r\n            noEvents: false,\r\n            searchType: '1',\r\n        }\r\n        this.showNearMe();\r\n    }\r\n\r\n    updateUserLocation = (position) => {\r\n        this.setState({ lat: position.coords.latitude, long: position.coords.longitude }, this.getVenuesNearMe)\r\n    }\r\n\r\n    computeDistance = () => {\r\n        let from = new LatLng(this.state.lat, this.state.long)\r\n        let to = new LatLng(this.state.searchResult.candidates[0].geometry.location.lat, this.state.searchResult.candidates[0].geometry.location.lng);\r\n        let distance = computeDistanceBetween(from, to);\r\n        return distance;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(this.updateUserLocation, function (err) {\r\n                console.log('Geolocation error: ' + err);\r\n            });\r\n        } else {\r\n            console.log(\"Geolocation Not Available\");\r\n        }\r\n    }\r\n\r\n    handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (this.state.searchType === '1') {\r\n            let res = await fetch('/venues/search/' + this.state.searchVal, {method: 'GET'});\r\n            if (res.status === 200) {\r\n                let data = JSON.parse(await res.text());\r\n                this.setState({venueSearchResult: data});\r\n            } else {\r\n                this.setState({venueSearchResult: null})\r\n            }\r\n        } else {\r\n            let res = await fetch('/events/search/' + this.state.searchVal, {method: 'GET'});\r\n            if (res.status === 200) {\r\n                let data = JSON.parse(await res.text())\r\n                this.setState({eventSearchResult: data});\r\n            } else {\r\n                this.setState({eventSearchResult: null})\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        if (event.target.name === 'distance') {\r\n            this.setState({ [event.target.name]: event.target.value }, this.getVenuesNearMe)\r\n        } else if(event.target.name === 'searchType') {\r\n            if (event.target.value === '1') {\r\n                this.setState({[event.target.name]: event.target.value, eventSearchResult: null})\r\n            } else {\r\n                this.setState({[event.target.name]: event.target.value, venueSearchResult: null})\r\n            }\r\n        } else {\r\n            this.setState({ [event.target.name]: event.target.value })\r\n        }\r\n    }\r\n\r\n    displayResults = () => {\r\n        return (\r\n            <div>\r\n                <div>Name: {this.state.searchResult.candidates[0].name}</div>\r\n                <div>Address: {this.state.searchResult.candidates[0].formatted_address}</div>\r\n                <div>Latitude: {this.state.searchResult.candidates[0].geometry.location.lat}</div>\r\n                <div>Longitude: {this.state.searchResult.candidates[0].geometry.location.lng}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    showSearch = () => {\r\n        this.setState({ search: true });\r\n    }\r\n\r\n    // Called as soon as user location data is recieved\r\n    getVenuesNearMe = async () => {\r\n        if (this.state.lat && this.state.long) {\r\n            let res = await fetch('/venues/nearme/' + this.state.distance, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ lat: this.state.lat, long: this.state.long }),\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            if (res.status === 200) {\r\n                let venues = await res.text()\r\n                this.setState({ venuesNearMe: JSON.parse(venues) }, this.getEventsNearMe)\r\n            } else {\r\n                this.setState({venuesNearMe: []})\r\n            }\r\n        }\r\n    }\r\n\r\n    getEventsNearMe = async () => {\r\n        let events = []\r\n        let noEventsFound = false;\r\n        for (let venue of this.state.venuesNearMe) {\r\n            for (let eventId of venue.eventIDs) {\r\n                let res = await fetch('events/' + eventId, { method: 'GET' });\r\n                if (res.status === 200) {\r\n                    events.push(JSON.parse(await res.text()));\r\n                }\r\n            }\r\n        }\r\n        if (events.length === 0) {\r\n            console.log('No events')\r\n            noEventsFound = true;\r\n        }\r\n        this.setState({eventsNearMe: events, noEvents: noEventsFound})\r\n    }\r\n\r\n    showNearMe = async () => {\r\n        this.getVenuesNearMe();\r\n        this.setState({ search: false })\r\n    }\r\n\r\n    renderSearch = () => {\r\n        return (\r\n            <center>\r\n                <form onSubmit={this.handleSubmit}>\r\n                <label>Search Type:\r\n                    <select name=\"searchType\" value={this.state.searchType}\r\n                            className=\"form-control form-center\" onChange={this.handleChange}>\r\n                            <option value=\"1\">Venues</option>\r\n                            <option value=\"2\">Events</option>\r\n                        </select>\r\n                    </label>\r\n                    <label>Enter a search\r\n                        <input className=\"form-control form-text form-center\"\r\n                            name=\"searchVal\"\r\n                            type=\"text\"\r\n                            value={this.state.searchVal}\r\n                            onChange={this.handleChange}>\r\n                        </input>\r\n                    </label>\r\n                    <br></br>\r\n                    <button className=\"btn btn-primary btn-color-theme\" role=\"submit\">Submit</button>\r\n                </form>\r\n                {this.state.eventSearchResult !== null ? <div>{this.state.eventSearchResult.name}</div> : null }\r\n                {this.state.venueSearchResult !== null ? <div>{this.state.venueSearchResult.user.displayName}</div> : null }\r\n            </center>\r\n        )\r\n        // return (\r\n        //     <center>\r\n        //         <form onSubmit={this.handleSubmit}>\r\n        //             <label>Enter a search<br />\r\n        //                 <input className=\"form-control form-text form-center\"\r\n        //                     name=\"searchVal\"\r\n        //                     type=\"text\"\r\n        //                     value={this.state.searchVal}\r\n        //                     onChange={this.handleChange}>\r\n        //                 </input>\r\n        //             </label>\r\n        //             <br />\r\n        //             <button role=\"submit\">Submit</button>\r\n        //         </form>\r\n        //         <div>User lat: {this.state.lat}</div>\r\n        //         <div>User long: {this.state.long}</div>\r\n        //         {this.state.validSearch ? this.displayResults() : null}\r\n        //         <br></br>\r\n        //         {this.state.validSearch && this.state.lat && this.state.long ? <div>Your distance from search: {this.computeDistance()} meters</div> : <div>Waiting for location data</div>}\r\n        //         <iframe\r\n        //             width=\"400\"\r\n        //             height=\"300\"\r\n        //             frameborder=\"0\" style={{ border: 0 }}\r\n        //             src={this.state.mapUrl} allowfullscreen>\r\n        //         </iframe>\r\n        //     </center>\r\n        // )\r\n    }\r\n\r\n    renderVenues = () => {\r\n        let table = [];\r\n        for (let venue of this.state.venuesNearMe) {\r\n            table.push(\r\n                <div>{venue.streetAddress}</div>\r\n            )\r\n        }\r\n        if (table.length > 0) {\r\n            return table;\r\n        } else {\r\n            return (<div>Loading nearby venues...</div>)\r\n        }\r\n    }\r\n\r\n    renderEvents = () => {\r\n        let table = []\r\n        for (let newEvent of this.state.eventsNearMe) {\r\n            table.push(\r\n                <div>{newEvent.name}</div>\r\n            )\r\n        }\r\n\r\n        if (table.length > 0) {\r\n            return table;\r\n        } else if(this.state.noEvents){\r\n            return (<div>No events were found</div>)\r\n        } else {\r\n            return (<div>Loading nearby events...</div>)\r\n        }\r\n    }\r\n\r\n    renderNearMe = () => {\r\n        return (\r\n            <center>\r\n                <label>Distance:\r\n                <select name=\"distance\" value={this.state.distance}\r\n                        className=\"form-control form-center\" onChange={this.handleChange}>\r\n                        <option value=\"5\">5 miles</option>\r\n                        <option value=\"10\">10 miles</option>\r\n                        <option value=\"20\">20 miles</option>\r\n                        <option value=\"50\">50 miles</option>\r\n                    </select>\r\n                </label>\r\n                {this.renderVenues()}\r\n                <hr></hr>\r\n                {this.renderEvents()}\r\n            </center>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padded-page\">\r\n                <center>\r\n                    <table>\r\n                        <tr>\r\n                            <th><button className=\"btn btn-primary btn-color-theme\" disabled={!this.state.search} onClick={this.showNearMe}>Near me</button></th>\r\n                            <th><button className=\"btn btn-primary btn-color-theme\" disabled={this.state.search} onClick={this.showSearch}>Search</button></th>\r\n                        </tr>\r\n                    </table>\r\n                </center>\r\n                {this.state.search ? this.renderSearch() : this.renderNearMe()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LocationSearch;","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\n\r\nclass VenueAccount extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the Time input DOM element\r\n        this.state = {\r\n            url: '',\r\n            name: '',\r\n            time:'',\r\n            artists:''\r\n                    };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({[event.target.name]: event.target.value});\r\n        this.setState({\r\n            url:  '/events/' + this.state.name\r\n        });\r\n    }\r\n\r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        let userData = {\r\n            venueId: this.props.userId,\r\n            name: this.state.name,\r\n            time: this.state.time,\r\n            artists: this.state.artists\r\n        };\r\n        const url = this.state.url;\r\n        let res;\r\n            //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                 //Unsuccessful account creation\r\n                //Grab textual error message\r\n                console.log(\"Something failed\");\r\n            }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"modal\" role=\"dialog\">\r\n            <div className=\"modal-dialog modal-lg\"></div>\r\n            <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n            <h3><b>Venue account, create an events!</b></h3>\r\n                <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            Event Name:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"name\"\r\n                    id = \"name\"\r\n                    type=\"text\"\r\n                    size=\"40\"\r\n                    required={true}\r\n                    value={this.state.name}\r\n                    onChange={this.handleChange}\r\n                    />\r\n            Time:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"time\"\r\n                    id=\"time\"\r\n                    type=\"text\"\r\n                    size=\"30\"\r\n                    required={true}\r\n                    value={this.state.time}\r\n                    onChange={this.handleChange}\r\n                    />\r\n            artists:\r\n            <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"artists\"\r\n                    id=\"artists\"\r\n                    type=\"text\"\r\n                    size=\"30\"\r\n                    required={true}\r\n                    value={this.state.artists}\r\n                    onChange={this.handleChange}\r\n                    />\r\n            <p></p>\r\n            <button role=\"submit\" id=\"venueSubmitBtn\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                &nbsp;Create Event</button>\r\n            </form>\r\n            </div></div></div>\r\n        );\r\n    }\r\n}\r\nexport default VenueAccount;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport LocationSearch from './LocationSearch.js';\r\nimport VenueAccount from './VenueAccount.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"URScene Login\";\r\nmodeTitle[AppMode.FEED] = \"Events near you\";\r\nmodeTitle[AppMode.ROUNDS] = \"My events\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Enter new event\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Event\";\r\nmodeTitle[AppMode.COURSES] = \"Venues\";\r\nmodeTitle[AppMode.LOCATION_SEARCH] = \"Location Search\"\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.LOCATION_SEARCH] = LocationSearch;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  accountObj: {},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false,\r\n                  showVenueAccountDialog: false,\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user.user,\r\n              accountObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n            console.log(obj);\r\n          }\r\n        }\r\n      )\r\n    } \r\n\r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  showVenueAccount = () => {\r\n    this.setState({showVenueAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  cancelVenueAccount = () => {\r\n    this.setState({showVenueAccountDialog: false});\r\n  }\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n        this.setState({showVenueAccountDialog: false});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n\r\n    this.componentDidMount();\r\n    return (\r\n      <div>\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n\r\n        {this.state.showVenueAccountDialog ? \r\n            <VenueAccount\r\n            userId={this.state.userObj._id} \r\n            done={this.editAccountDone}\r\n            cancel={this.cancelVenueAccount}/> : null}\r\n        \r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n        <SideMenu \r\n          menuOpen = {this.state.menuOpen}\r\n          mode={this.state.mode}\r\n          toggleMenuOpen={this.toggleMenuOpen}\r\n          displayName={this.state.userObj.displayName}\r\n          profilePicURL={this.state.userObj.profilePicURL}\r\n          localAccount={this.state.userObj.authStrategy === \"local\"}\r\n          editAccount={this.showEditAccount}\r\n\r\n          accountType={this.state.userObj.accountType}\r\n          VenueAccount={this.showVenueAccount}\r\n          \r\n          logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n          showAbout={() => {this.setState({showAboutDialog: true})}}\r\n          changeMode={this.handleChangeMode}/>\r\n        <ModeBar \r\n          mode={this.state.mode} \r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          accountType={this.state.userObj.accountType}/>\r\n        <ModePage \r\n          menuOpen={this.state.menuOpen}\r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          userObj={this.state.userObj}\r\n          accountObj= {this.state.accountObj}\r\n          accountType={this.state.userObj.accountType}\r\n          refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}